#define SECDEC_RESULT_IS_COMPLEX 1
#include "common_cuda.h"

#define SecDecInternalSignCheckPositivePolynomial(cond, id) if (unlikely(cond)) {val = REAL_NAN; break;}
#define SecDecInternalSignCheckContourDeformation(cond, id) if (unlikely(cond)) {val = REAL_NAN; break;}

extern "C" __global__ void
doublebox_nonplanar_integral__sector_18_order_0(
    result_t * __restrict__ result,
    const uint64_t lattice,
    const uint64_t index1,
    const uint64_t index2,
    const uint64_t * __restrict__ genvec,
    const real_t * __restrict__ shift,
    const real_t * __restrict__ realp,
    const complex_t * __restrict__ complexp,
    const real_t * __restrict__ deformp
)
{
    // assert(blockDim.x == 128);
    const uint64_t bid = blockIdx.x;
    const uint64_t tid = threadIdx.x;
    const real_t s = realp[0]; (void)s;
    const real_t t = realp[1]; (void)t;
    const real_t msq = realp[2]; (void)msq;
    const real_t SecDecInternalLambda0 = deformp[0]; (void)SecDecInternalLambda0;
    const real_t SecDecInternalLambda1 = deformp[1]; (void)SecDecInternalLambda1;
    const real_t SecDecInternalLambda2 = deformp[2]; (void)SecDecInternalLambda2;
    const real_t SecDecInternalLambda3 = deformp[3]; (void)SecDecInternalLambda3;
    const real_t SecDecInternalLambda4 = deformp[4]; (void)SecDecInternalLambda4;
    const real_t SecDecInternalLambda5 = deformp[5]; (void)SecDecInternalLambda5;
    const real_t invlattice = SecDecInternalDenominator((real_t)(double)lattice);
    result_t val = (result_t)0;
    uint64_t index = index1 + (bid*128 + tid)*8;
    uint64_t li_x0 = mulmod(index, genvec[0], lattice);
    uint64_t li_x1 = mulmod(index, genvec[1], lattice);
    uint64_t li_x2 = mulmod(index, genvec[2], lattice);
    uint64_t li_x3 = mulmod(index, genvec[3], lattice);
    uint64_t li_x4 = mulmod(index, genvec[4], lattice);
    uint64_t li_x5 = mulmod(index, genvec[5], lattice);
    for (uint64_t i = 0; (i < 8) && (index < index2); i++, index++) {
        real_t x0 = warponce(invlattice*(double)li_x0 + shift[0], 1.0);
        li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        real_t x1 = warponce(invlattice*(double)li_x1 + shift[1], 1.0);
        li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        real_t x2 = warponce(invlattice*(double)li_x2 + shift[2], 1.0);
        li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        real_t x3 = warponce(invlattice*(double)li_x3 + shift[3], 1.0);
        li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        real_t x4 = warponce(invlattice*(double)li_x4 + shift[4], 1.0);
        li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        real_t x5 = warponce(invlattice*(double)li_x5 + shift[5], 1.0);
        li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        real_t w_x0 = korobov3x3_w(x0);
        real_t w_x1 = korobov3x3_w(x1);
        real_t w_x2 = korobov3x3_w(x2);
        real_t w_x3 = korobov3x3_w(x3);
        real_t w_x4 = korobov3x3_w(x4);
        real_t w_x5 = korobov3x3_w(x5);
        real_t w = w_x0*w_x1*w_x2*w_x3*w_x4*w_x5;
        x0 = korobov3x3_f(x0);
        x1 = korobov3x3_f(x1);
        x2 = korobov3x3_f(x2);
        x3 = korobov3x3_f(x3);
        x4 = korobov3x3_f(x4);
        x5 = korobov3x3_f(x5);
        auto tmp1_1 = x0 + 1;
        auto tmp1_2 = 2*x2;
        auto tmp1_3 = tmp1_2*tmp1_1;
        auto tmp1_4 = 2*x0;
        auto tmp1_5 = tmp1_4 + 1;
        auto tmp3_1 = tmp1_3 + tmp1_5;
        auto tmp1_6 = msq*x1;
        auto tmp1_7 = tmp1_6*tmp3_1;
        auto tmp1_8 = x2*t;
        auto tmp1_9 = tmp1_8*x1;
        auto tmp3_2 = tmp1_7-tmp1_9;
        auto tmp1_10 = 2*tmp3_2;
        auto tmp1_11 = 2*msq;
        auto tmp1_12 = tmp1_11*x1;
        auto tmp1_13 = tmp1_1 + x2;
        auto tmp1_14 = tmp1_13*tmp1_11;
        auto tmp1_15 = 3*x1;
        auto tmp1_16 = tmp1_15*tmp1_13;
        auto tmp3_3 = tmp1_16 + tmp3_1;
        auto tmp1_17 = tmp3_3*x5;
        auto tmp1_18 = tmp1_1*x3;
        auto tmp1_19 = tmp1_18 + tmp1_1;
        auto tmp1_20 = tmp1_1*x4;
        auto tmp3_4 = tmp1_19 + tmp1_20;
        auto tmp1_21 = x3 + 1;
        auto tmp1_22 = tmp1_21 + x4;
        auto tmp1_23 = tmp1_22*x2;
        auto tmp3_5 = tmp3_4 + tmp1_23;
        auto tmp1_24 = tmp1_22*x1;
        auto tmp3_6 = tmp1_24 + tmp3_5;
        auto tmp3_7 = tmp1_17 + 2*tmp3_6;
        auto tmp3_8 = tmp3_7*msq;
        auto tmp3_9 = t*tmp1_1;
        auto tmp1_25 = -tmp3_9-tmp1_8;
        auto tmp3_10 = x3*tmp1_25;
        auto tmp3_11 = tmp1_9 + tmp1_8;
        auto tmp1_26 = -x5*tmp3_11;
        auto tmp1_27 = x3*t;
        auto tmp1_28 = -x1*tmp1_27;
        auto tmp3_12 = tmp3_8 + tmp1_26 + tmp1_28 + tmp3_10;
        auto tmp3_13 = msq*x5;
        auto tmp3_14 = tmp1_11*x5;
        auto tmp1_29 = tmp3_14*tmp1_22;
        auto tmp1_30 = x5*t;
        auto tmp1_31 = x4*t;
        auto tmp3_15 = tmp1_30 + tmp1_31;
        auto tmp1_32 = 2*tmp1_13;
        auto tmp1_33 = tmp1_32 + tmp1_15;
        auto tmp3_16 = tmp1_33*x5;
        auto tmp1_34 = 2*tmp1_22;
        auto tmp3_17 = tmp3_16 + tmp1_34;
        auto tmp3_18 = tmp3_17*msq;
        auto tmp1_35 = tmp3_18-tmp3_15;
        auto tmp1_36 = tmp1_22*tmp3_13;
        auto tmp1_37 = 3*tmp1_36;
        auto tmp1_38 = -x5*s;
        auto tmp3_19 = tmp1_38 + tmp1_37;
        auto tmp1_39 = tmp1_13 + x1;
        auto tmp1_40 = tmp1_39*tmp1_11;
        auto tmp1_41 = tmp3_18-tmp1_27;
        auto tmp1_42 = x0*s;
        auto tmp1_43 = tmp1_31*x2;
        auto tmp3_20 = tmp1_42 + tmp1_43 + tmp1_27;
        auto tmp1_44 = -x5*tmp3_20;
        auto tmp1_45 = 2*x1;
        auto tmp1_46 = tmp1_22*tmp1_45;
        auto tmp3_21 = tmp1_46 + 3*tmp3_5;
        auto tmp1_47 = x5*tmp3_21;
        auto tmp1_48 = 2*x4;
        auto tmp3_22 = tmp1_48*tmp1_21;
        auto tmp3_23 = tmp3_22 + 1 + 2*x3;
        auto tmp3_24 = tmp1_47 + tmp3_23;
        auto tmp3_25 = msq*tmp3_24;
        auto tmp1_49 = tmp1_31*x3;
        auto tmp3_26 = tmp3_25-tmp1_49 + tmp1_44;
        auto tmp3_27 = tmp1_45*tmp1_13;
        auto tmp3_28 = tmp3_27 + tmp3_1;
        auto tmp1_50 = msq*tmp3_28;
        auto tmp3_29 = -tmp1_8 + tmp1_50;
        auto tmp3_30 = tmp1_22*tmp1_5;
        auto tmp3_31 = tmp3_4*tmp1_2;
        auto tmp1_51 = tmp3_5*tmp1_15;
        auto tmp3_32 = tmp3_30 + tmp3_31 + tmp1_51;
        auto tmp3_33 = tmp1_45*x5;
        auto tmp3_34 = tmp3_1*tmp3_33;
        auto tmp3_35 = tmp3_34 + tmp3_32;
        auto tmp3_36 = msq*tmp3_35;
        auto tmp3_37 = tmp3_20*x1;
        auto tmp1_52 = t + tmp1_27 + tmp1_31;
        auto tmp1_53 = tmp1_52*x2;
        auto tmp3_38 = tmp1_53 + tmp3_37;
        auto tmp3_39 = -tmp1_8*tmp3_33;
        auto tmp3_40 = tmp3_36 + tmp3_39-tmp3_38;
        auto tmp3_41 = tmp1_22 + tmp3_33;
        auto tmp3_42 = tmp3_41*msq;
        auto tmp3_43 = x5*tmp1_32;
        auto tmp3_44 = tmp3_43 + tmp1_22;
        auto tmp3_45 = msq*tmp3_44;
        auto tmp1_54 = tmp1_45 + 3*tmp1_13;
        auto tmp3_46 = tmp1_54*x5;
        auto tmp3_47 = tmp3_46 + tmp1_34;
        auto tmp3_48 = tmp3_47*msq;
        auto tmp3_49 = tmp3_48-tmp3_15;
        auto tmp3_50 = tmp1_15*tmp1_22;
        auto tmp3_51 = tmp3_50 + 2*tmp3_5;
        auto tmp3_52 = x5*x1;
        auto tmp3_53 = tmp3_52*tmp1_13;
        auto tmp3_54 = tmp3_51 + 4*tmp3_53;
        auto tmp3_55 = tmp3_54*msq;
        auto tmp3_56 = -x1*s;
        auto tmp3_57 = tmp3_56 + tmp3_55;
        auto tmp3_58 = tmp3_51*x5;
        auto tmp3_59 = tmp3_58 + tmp3_23;
        auto tmp3_60 = tmp3_59*msq;
        auto tmp3_61 = tmp3_60-tmp1_49;
        auto tmp1_55 = tmp1_31*x1;
        auto tmp3_62 = tmp1_55 + tmp1_52;
        auto tmp1_56 = -x5*tmp3_62;
        auto tmp3_63 = tmp1_56 + tmp3_61;
        auto tmp1_57 = tmp1_12*tmp1_13;
        auto tmp1_58 = x1*t;
        auto tmp1_59 = -tmp1_58 + tmp1_57;
        auto tmp3_64 = -s*tmp3_52;
        auto tmp3_65 = tmp3_64 + tmp3_61;
        auto tmp3_66 = tmp3_3*msq;
        auto tmp3_67 = tmp3_66-tmp3_11;
        auto tmp3_68 = 2*x5;
        auto tmp3_69 = tmp3_28*tmp3_68;
        auto tmp3_70 = tmp3_69 + tmp3_21;
        auto tmp3_71 = msq*tmp3_70;
        auto tmp3_72 = -tmp1_8*tmp3_68;
        auto tmp3_73 = tmp3_71 + tmp3_72-tmp3_20;
        auto tmp3_74 = -x5*tmp1_31;
        auto tmp3_75 = tmp3_74 + tmp1_37;
        auto tmp3_76 = -t + tmp1_40;
        auto tmp3_77 = -t-tmp1_58;
        auto tmp3_78 = x5*tmp3_77;
        auto tmp3_79 = tmp3_78 + tmp1_41;
        auto tmp1_60 = tmp3_9*x4;
        auto tmp3_80 = tmp1_60 + tmp1_43;
        auto tmp3_81 = tmp1_58 + tmp1_8;
        auto tmp3_82 = -x5*tmp3_81;
        auto tmp3_83 = tmp3_8 + tmp3_82-tmp1_55-tmp3_80;
        auto tmp3_84 = -x5*tmp1_8;
        auto tmp3_85 = tmp3_48-tmp1_27 + tmp3_84;
        auto tmp3_86 = tmp1_40-tmp3_9-tmp3_81;
        auto tmp3_87 = -t*tmp3_33;
        auto tmp3_88 = tmp3_55 + tmp3_87-tmp3_62;
        auto tmp3_89 = tmp3_18-tmp1_31;
        auto tmp3_90 = tmp3_66-tmp3_81;
        auto tmp3_91 = x5*tmp3_32;
        auto tmp3_92 = x1 + x2;
        auto tmp3_93 = tmp3_23*tmp3_92;
        auto tmp3_94 = tmp1_19*tmp1_48;
        auto tmp3_95 = tmp3_91 + tmp3_94 + 2*tmp1_18 + tmp1_1 + tmp3_93;
        auto tmp3_96 = msq*tmp3_95;
        auto tmp3_97 = -x5*tmp3_38;
        auto tmp3_98 = -x3*tmp3_80;
        auto tmp3_99 = -x1*tmp1_49;
        auto tmp3_100 = tmp3_96 + tmp3_97 + tmp3_99 + tmp3_98;
        auto tmp3_101 = tmp1_39*msq;
        auto tmp3_102 = msq*tmp1_13;
        auto tmp3_103 = tmp1_11-t;
        auto tmp3_104 = 3*msq;
        auto tmp3_105 = tmp3_104-t;
        auto tmp3_106 = -s + tmp3_104;
        auto tmp3_107 = x5*SecDecInternalLambda5;
        auto tmp3_108 = -SecDecInternalLambda5 + tmp3_107;
        auto tmp3_109 = -SecDecInternalLambda5 + 2*tmp3_107;
        auto tmp3_110 = x4*SecDecInternalLambda4;
        auto tmp3_111 = -SecDecInternalLambda4 + 2*tmp3_110;
        auto tmp3_112 = x3*SecDecInternalLambda3;
        auto tmp3_113 = -SecDecInternalLambda3 + 2*tmp3_112;
        auto tmp3_114 = x2*SecDecInternalLambda2;
        auto tmp3_115 = -1 + tmp1_2;
        auto tmp3_116 = SecDecInternalLambda2*tmp3_115;
        auto tmp3_117 = x1*SecDecInternalLambda1;
        auto tmp3_118 = -1 + tmp1_45;
        auto tmp3_119 = SecDecInternalLambda1*tmp3_118;
        auto tmp3_120 = x0*SecDecInternalLambda0;
        auto tmp3_121 = -1 + tmp1_4;
        auto tmp3_122 = SecDecInternalLambda0*tmp3_121;
        auto __PowCall1 = SecDecInternalSqr(x0);
        auto __PowCall2 = SecDecInternalSqr(x1);
        auto __PowCall3 = SecDecInternalSqr(x2);
        auto __PowCall4 = SecDecInternalSqr(x3);
        auto __PowCall5 = SecDecInternalSqr(x4);
        auto __PowCall6 = SecDecInternalSqr(x5);
        auto tmp2_33 = __PowCall3 + __PowCall1;
        auto tmp2_34 = tmp2_33 + __PowCall2;
        auto tmp2_35 = tmp2_34*msq;
        auto tmp2_36 = tmp3_90 + tmp2_35;
        auto tmp2_37 = __PowCall2*tmp3_14;
        auto tmp2_38 = tmp3_88 + tmp2_37;
        auto tmp2_39 = tmp1_6*tmp2_33;
        auto tmp2_40 = __PowCall2*tmp3_102;
        auto tmp3_123 = tmp2_40 + tmp3_2 + tmp2_39;
        auto tmp3_124 = __PowCall6*tmp3_123;
        auto tmp3_125 = __PowCall5 + __PowCall4;
        auto tmp2_41 = tmp3_101*tmp3_125;
        auto tmp2_42 = tmp1_36*tmp2_34;
        auto tmp3_126 = tmp3_124 + tmp3_100 + tmp2_42 + tmp2_41;
        auto tmp3_127 = tmp3_13*tmp2_34;
        auto tmp3_128 = tmp3_83 + tmp3_127;
        auto tmp3_129 = __PowCall6*tmp3_76;
        auto tmp3_130 = tmp3_75 + tmp3_129;
        auto tmp2_43 = tmp3_14*tmp2_33;
        auto tmp3_131 = tmp3_73 + tmp2_43;
        auto tmp3_132 = tmp3_67 + tmp2_35;
        auto tmp3_133 = tmp3_125*msq;
        auto tmp2_44 = msq*__PowCall2;
        auto tmp2_45 = tmp1_57 + tmp2_44;
        auto tmp3_134 = __PowCall6*tmp2_45;
        auto tmp3_135 = tmp3_134 + tmp3_65 + tmp3_133;
        auto tmp3_136 = tmp1_59 + tmp2_44;
        auto tmp3_137 = __PowCall6*tmp3_136;
        auto tmp3_138 = tmp3_137 + tmp3_63 + tmp3_133;
        auto tmp3_139 = tmp3_57 + tmp2_37;
        auto tmp2_46 = tmp3_42*tmp2_33;
        auto tmp2_47 = __PowCall2*tmp3_45;
        auto tmp3_140 = tmp2_47 + tmp3_40 + tmp2_46;
        auto tmp3_141 = msq*tmp2_33;
        auto tmp3_142 = tmp3_29 + tmp3_141;
        auto tmp3_143 = __PowCall6*tmp3_142;
        auto tmp3_144 = tmp3_143 + tmp3_26 + tmp3_133;
        auto tmp3_145 = __PowCall6*tmp1_12;
        auto tmp3_146 = tmp3_145 + tmp1_29;
        auto tmp2_48 = __PowCall6*tmp1_40;
        auto tmp3_147 = tmp3_19 + tmp2_48;
        auto tmp2_49 = __PowCall6*tmp1_14;
        auto tmp3_148 = tmp1_29 + tmp2_49;
        auto tmp3_149 = tmp3_12 + tmp3_127;
        auto tmp3_150 = tmp1_12*tmp2_33;
        auto tmp2_50 = __PowCall2*tmp1_14;
        auto tmp3_151 = tmp2_50 + tmp1_10 + tmp3_150;
        auto __RealPartCall2 = SecDecInternalRealPart(tmp3_89);
        auto __RealPartCall4 = SecDecInternalRealPart(tmp1_40);
        auto __RealPartCall5 = SecDecInternalRealPart(tmp1_40);
        auto __RealPartCall6 = SecDecInternalRealPart(tmp3_86);
        auto __RealPartCall7 = SecDecInternalRealPart(tmp3_85);
        auto __RealPartCall9 = SecDecInternalRealPart(tmp3_79);
        auto __RealPartCall16 = SecDecInternalRealPart(tmp3_49);
        auto __RealPartCall19 = SecDecInternalRealPart(tmp1_41);
        auto __RealPartCall23 = SecDecInternalRealPart(tmp1_35);
        auto tmp3_152 = __PowCall1*SecDecInternalLambda0;
        auto tmp3_153 = tmp3_152-tmp3_120;
        auto tmp3_154 = SecDecInternalI(tmp3_153);
        auto tmp3_155 = __RealPartCall2*tmp3_154;
        auto tmp3_156 = __RealPartCall19*tmp3_154;
        auto tmp3_157 = __PowCall2*SecDecInternalLambda1;
        auto tmp3_158 = tmp3_157-tmp3_117;
        auto tmp3_159 = SecDecInternalI(tmp3_158);
        auto tmp3_160 = __RealPartCall16*tmp3_159;
        auto tmp3_161 = __RealPartCall7*tmp3_159;
        auto tmp3_162 = __PowCall3*SecDecInternalLambda2;
        auto tmp3_163 = tmp3_162-tmp3_114;
        auto tmp3_164 = SecDecInternalI(tmp3_163);
        auto tmp3_165 = __RealPartCall23*tmp3_164;
        auto tmp3_166 = __RealPartCall9*tmp3_164;
        auto tmp3_167 = __PowCall4*SecDecInternalLambda3;
        auto tmp3_168 = tmp3_167-tmp3_112;
        auto tmp3_169 = SecDecInternalI(tmp3_168);
        auto tmp3_170 = __RealPartCall2*tmp3_169;
        auto tmp3_171 = __RealPartCall16*tmp3_169;
        auto tmp3_172 = __RealPartCall23*tmp3_169;
        auto tmp3_173 = __RealPartCall6*tmp3_169;
        auto tmp3_174 = __PowCall5*SecDecInternalLambda4;
        auto tmp3_175 = tmp3_174-tmp3_110;
        auto tmp3_176 = SecDecInternalI(tmp3_175);
        auto tmp3_177 = __RealPartCall19*tmp3_176;
        auto tmp3_178 = __RealPartCall7*tmp3_176;
        auto tmp3_179 = __RealPartCall9*tmp3_176;
        auto tmp3_180 = __RealPartCall6*tmp3_176;
        auto __RealPartCall1 = SecDecInternalRealPart(tmp2_36);
        auto __RealPartCall3 = SecDecInternalRealPart(tmp2_38);
        auto __RealPartCall8 = SecDecInternalRealPart(tmp3_128);
        auto __RealPartCall10 = SecDecInternalRealPart(tmp3_130);
        auto __RealPartCall11 = SecDecInternalRealPart(tmp3_131);
        auto __RealPartCall12 = SecDecInternalRealPart(tmp3_132);
        auto __RealPartCall13 = SecDecInternalRealPart(tmp3_135);
        auto __RealPartCall14 = SecDecInternalRealPart(tmp3_138);
        auto __RealPartCall15 = SecDecInternalRealPart(tmp3_139);
        auto __RealPartCall17 = SecDecInternalRealPart(tmp3_140);
        auto __RealPartCall18 = SecDecInternalRealPart(tmp3_144);
        auto __RealPartCall20 = SecDecInternalRealPart(tmp3_146);
        auto __RealPartCall21 = SecDecInternalRealPart(tmp3_147);
        auto __RealPartCall22 = SecDecInternalRealPart(tmp3_146);
        auto __RealPartCall24 = SecDecInternalRealPart(tmp3_146);
        auto __RealPartCall25 = SecDecInternalRealPart(tmp3_148);
        auto __RealPartCall26 = SecDecInternalRealPart(tmp3_149);
        auto __RealPartCall27 = SecDecInternalRealPart(tmp3_151);
        auto tmp3_181 = SecDecInternalI(tmp3_108*__RealPartCall17);
        auto tmp3_182 = 1 + tmp3_181;
        auto tmp3_183 = __PowCall1*SecDecInternalLambda0;
        auto tmp3_184 = tmp3_183-tmp3_120;
        auto tmp3_185 = SecDecInternalI(tmp3_184);
        auto tmp3_186 = __RealPartCall13*tmp3_185;
        auto tmp3_187 = x0 + tmp3_186;
        auto tmp3_188 = __RealPartCall22*tmp3_184;
        auto tmp3_189 = __RealPartCall13*tmp3_122;
        auto tmp3_190 = tmp3_189 + tmp3_188;
        auto tmp3_191 = SecDecInternalI(tmp3_190);
        auto tmp3_192 = 1 + tmp3_191;
        auto tmp3_193 = __RealPartCall21*tmp3_185;
        auto tmp3_194 = __RealPartCall20*tmp3_185;
        auto tmp3_195 = __RealPartCall15*tmp3_185;
        auto tmp3_196 = __PowCall2*SecDecInternalLambda1;
        auto tmp3_197 = tmp3_196-tmp3_117;
        auto tmp3_198 = SecDecInternalI(tmp3_197);
        auto tmp3_199 = __RealPartCall18*tmp3_198;
        auto tmp3_200 = x1 + tmp3_199;
        auto tmp3_201 = __RealPartCall21*tmp3_198;
        auto tmp3_202 = __RealPartCall25*tmp3_197;
        auto tmp3_203 = __RealPartCall18*tmp3_119;
        auto tmp3_204 = tmp3_203 + tmp3_202;
        auto tmp3_205 = SecDecInternalI(tmp3_204);
        auto tmp3_206 = 1 + tmp3_205;
        auto tmp3_207 = __RealPartCall10*tmp3_198;
        auto tmp3_208 = __RealPartCall11*tmp3_198;
        auto tmp3_209 = __PowCall3*SecDecInternalLambda2;
        auto tmp3_210 = tmp3_209-tmp3_114;
        auto tmp3_211 = SecDecInternalI(tmp3_210);
        auto tmp3_212 = __RealPartCall14*tmp3_211;
        auto tmp3_213 = x2 + tmp3_212;
        auto tmp3_214 = __RealPartCall20*tmp3_211;
        auto tmp3_215 = __RealPartCall10*tmp3_211;
        auto tmp3_216 = __RealPartCall24*tmp3_210;
        auto tmp3_217 = __RealPartCall14*tmp3_116;
        auto tmp3_218 = tmp3_217 + tmp3_216;
        auto tmp3_219 = SecDecInternalI(tmp3_218);
        auto tmp3_220 = 1 + tmp3_219;
        auto tmp3_221 = __RealPartCall3*tmp3_211;
        auto tmp3_222 = __PowCall4*SecDecInternalLambda3;
        auto tmp3_223 = tmp3_222-tmp3_112;
        auto tmp3_224 = SecDecInternalI(tmp3_223);
        auto tmp3_225 = __RealPartCall8*tmp3_224;
        auto tmp3_226 = x3 + tmp3_225;
        auto tmp3_227 = __RealPartCall4*tmp3_223;
        auto tmp3_228 = __RealPartCall8*tmp3_113;
        auto tmp3_229 = tmp3_228 + tmp3_227;
        auto tmp3_230 = SecDecInternalI(tmp3_229);
        auto tmp3_231 = 1 + tmp3_230;
        auto tmp3_232 = __RealPartCall1*tmp3_224;
        auto tmp3_233 = __PowCall5*SecDecInternalLambda4;
        auto tmp3_234 = tmp3_233-tmp3_110;
        auto tmp3_235 = SecDecInternalI(tmp3_234);
        auto tmp3_236 = __RealPartCall26*tmp3_235;
        auto tmp3_237 = x4 + tmp3_236;
        auto tmp3_238 = __RealPartCall5*tmp3_234;
        auto tmp3_239 = __RealPartCall26*tmp3_111;
        auto tmp3_240 = tmp3_239 + tmp3_238;
        auto tmp3_241 = SecDecInternalI(tmp3_240);
        auto tmp3_242 = 1 + tmp3_241;
        auto tmp3_243 = __RealPartCall12*tmp3_235;
        auto tmp3_244 = __PowCall6*SecDecInternalLambda5;
        auto tmp3_245 = tmp3_244-tmp3_107;
        auto tmp3_246 = SecDecInternalI(tmp3_245);
        auto tmp3_247 = __RealPartCall17*tmp3_246;
        auto tmp3_248 = x5 + tmp3_247;
        auto tmp3_249 = __RealPartCall15*tmp3_246;
        auto tmp3_250 = __RealPartCall11*tmp3_246;
        auto tmp3_251 = __RealPartCall3*tmp3_246;
        auto tmp3_252 = __RealPartCall1*tmp3_246;
        auto tmp3_253 = __RealPartCall12*tmp3_246;
        auto tmp3_254 = __RealPartCall27*tmp3_245;
        auto tmp3_255 = __RealPartCall17*tmp3_109;
        auto tmp3_256 = tmp3_255 + tmp3_254;
        auto tmp3_257 = SecDecInternalI(tmp3_256);
        auto tmp3_258 = 1 + tmp3_257;
        auto tmp3_259 = 1 + tmp3_187 + tmp3_213;
        auto tmp3_260 = tmp3_200 + tmp3_259;
        auto tmp3_261 = tmp3_237 + tmp3_226 + 1;
        auto tmp3_262 = tmp3_261*tmp3_260;
        auto tmp3_263 = tmp3_248*tmp3_200*tmp3_259;
        auto tmp3_264 = tmp3_263 + tmp3_262;
        auto tmp3_265 = tmp3_180*tmp3_249;
        auto tmp3_266 = tmp3_177*tmp3_252;
        auto tmp3_267 = tmp3_265-tmp3_266;
        auto tmp3_268 = tmp3_267*tmp3_172;
        auto tmp3_269 = tmp3_179*tmp3_249;
        auto tmp3_270 = tmp3_177*tmp3_251;
        auto tmp3_271 = tmp3_269-tmp3_270;
        auto tmp3_272 = tmp3_271*tmp3_231;
        auto tmp3_273 = tmp3_180*tmp3_251;
        auto tmp3_274 = tmp3_179*tmp3_252;
        auto tmp3_275 = tmp3_273-tmp3_274;
        auto tmp3_276 = tmp3_275*tmp3_170;
        auto tmp3_277 = -tmp3_276 + tmp3_268-tmp3_272;
        auto tmp3_278 = tmp3_277*tmp3_215;
        auto tmp3_279 = tmp3_179*tmp3_250;
        auto tmp3_280 = tmp3_178*tmp3_251;
        auto tmp3_281 = tmp3_279-tmp3_280;
        auto tmp3_282 = tmp3_281*tmp3_170;
        auto tmp3_283 = tmp3_271*tmp3_171;
        auto tmp3_284 = tmp3_178*tmp3_249;
        auto tmp3_285 = tmp3_177*tmp3_250;
        auto tmp3_286 = tmp3_284-tmp3_285;
        auto tmp3_287 = tmp3_286*tmp3_172;
        auto tmp3_288 = tmp3_287 + tmp3_282-tmp3_283;
        auto tmp3_289 = tmp3_288*tmp3_165;
        auto tmp3_290 = tmp3_180*tmp3_250;
        auto tmp3_291 = tmp3_178*tmp3_252;
        auto tmp3_292 = tmp3_290-tmp3_291;
        auto tmp3_293 = tmp3_292*tmp3_170;
        auto tmp3_294 = tmp3_267*tmp3_171;
        auto tmp3_295 = tmp3_286*tmp3_231;
        auto tmp3_296 = tmp3_295 + tmp3_293-tmp3_294;
        auto tmp3_297 = tmp3_296*tmp3_220;
        auto tmp3_298 = tmp3_292*tmp3_172;
        auto tmp3_299 = tmp3_281*tmp3_231;
        auto tmp3_300 = tmp3_275*tmp3_171;
        auto tmp3_301 = -tmp3_300 + tmp3_298-tmp3_299;
        auto tmp3_302 = tmp3_301*tmp3_214;
        auto tmp3_303 = tmp3_278-tmp3_289 + tmp3_297-tmp3_302;
        auto tmp3_304 = tmp3_161*tmp3_303;
        auto tmp3_305 = tmp3_242*tmp3_250;
        auto tmp3_306 = tmp3_178*tmp3_253;
        auto tmp3_307 = tmp3_305-tmp3_306;
        auto tmp3_308 = tmp3_307*tmp3_170;
        auto tmp3_309 = tmp3_286*tmp3_173;
        auto tmp3_310 = tmp3_242*tmp3_249;
        auto tmp3_311 = tmp3_177*tmp3_253;
        auto tmp3_312 = tmp3_310-tmp3_311;
        auto tmp3_313 = tmp3_312*tmp3_171;
        auto tmp3_314 = -tmp3_313 + tmp3_308 + tmp3_309;
        auto tmp3_315 = tmp3_314*tmp3_220;
        auto tmp3_316 = tmp3_242*tmp3_251;
        auto tmp3_317 = tmp3_179*tmp3_253;
        auto tmp3_318 = tmp3_316-tmp3_317;
        auto tmp3_319 = tmp3_318*tmp3_170;
        auto tmp3_320 = tmp3_312*tmp3_172;
        auto tmp3_321 = tmp3_271*tmp3_173;
        auto tmp3_322 = tmp3_321 + tmp3_319-tmp3_320;
        auto tmp3_323 = tmp3_322*tmp3_215;
        auto tmp3_324 = tmp3_288*tmp3_166;
        auto tmp3_325 = tmp3_318*tmp3_171;
        auto tmp3_326 = tmp3_307*tmp3_172;
        auto tmp3_327 = tmp3_281*tmp3_173;
        auto tmp3_328 = tmp3_327 + tmp3_325-tmp3_326;
        auto tmp3_329 = tmp3_328*tmp3_214;
        auto tmp3_330 = -tmp3_329-tmp3_315 + tmp3_323 + tmp3_324;
        auto tmp3_331 = tmp3_160*tmp3_330;
        auto tmp3_332 = tmp3_242*tmp3_252;
        auto tmp3_333 = tmp3_180*tmp3_253;
        auto tmp3_334 = tmp3_332-tmp3_333;
        auto tmp3_335 = tmp3_334*tmp3_170;
        auto tmp3_336 = tmp3_312*tmp3_231;
        auto tmp3_337 = tmp3_267*tmp3_173;
        auto tmp3_338 = tmp3_337 + tmp3_335-tmp3_336;
        auto tmp3_339 = tmp3_338*tmp3_215;
        auto tmp3_340 = tmp3_334*tmp3_171;
        auto tmp3_341 = tmp3_307*tmp3_231;
        auto tmp3_342 = tmp3_292*tmp3_173;
        auto tmp3_343 = tmp3_342 + tmp3_340-tmp3_341;
        auto tmp3_344 = tmp3_343*tmp3_214;
        auto tmp3_345 = tmp3_314*tmp3_165;
        auto tmp3_346 = tmp3_296*tmp3_166;
        auto tmp3_347 = -tmp3_339 + tmp3_344 + tmp3_345-tmp3_346;
        auto tmp3_348 = tmp3_207*tmp3_347;
        auto tmp3_349 = tmp3_338*tmp3_220;
        auto tmp3_350 = tmp3_334*tmp3_172;
        auto tmp3_351 = tmp3_318*tmp3_231;
        auto tmp3_352 = tmp3_275*tmp3_173;
        auto tmp3_353 = tmp3_352 + tmp3_350-tmp3_351;
        auto tmp3_354 = tmp3_353*tmp3_214;
        auto tmp3_355 = tmp3_322*tmp3_165;
        auto tmp3_356 = tmp3_277*tmp3_166;
        auto tmp3_357 = tmp3_354-tmp3_349 + tmp3_355 + tmp3_356;
        auto tmp3_358 = -tmp3_206*tmp3_357;
        auto tmp3_359 = tmp3_343*tmp3_220;
        auto tmp3_360 = tmp3_353*tmp3_215;
        auto tmp3_361 = tmp3_301*tmp3_166;
        auto tmp3_362 = tmp3_328*tmp3_165;
        auto tmp3_363 = tmp3_360-tmp3_359 + tmp3_361 + tmp3_362;
        auto tmp3_364 = tmp3_201*tmp3_363;
        auto tmp3_365 = tmp3_364 + tmp3_358 + tmp3_348 + tmp3_304 + tmp3_331;
        auto tmp3_366 = tmp3_195*tmp3_365;
        auto tmp3_367 = -tmp3_208*tmp3_303;
        auto tmp3_368 = tmp3_243*tmp3_250;
        auto tmp3_369 = tmp3_178*tmp3_258;
        auto tmp3_370 = tmp3_368-tmp3_369;
        auto tmp3_371 = tmp3_370*tmp3_170;
        auto tmp3_372 = tmp3_243*tmp3_249;
        auto tmp3_373 = tmp3_177*tmp3_258;
        auto tmp3_374 = tmp3_372-tmp3_373;
        auto tmp3_375 = tmp3_374*tmp3_171;
        auto tmp3_376 = tmp3_286*tmp3_232;
        auto tmp3_377 = tmp3_376 + tmp3_371-tmp3_375;
        auto tmp3_378 = tmp3_377*tmp3_220;
        auto tmp3_379 = tmp3_243*tmp3_251;
        auto tmp3_380 = tmp3_179*tmp3_258;
        auto tmp3_381 = tmp3_379-tmp3_380;
        auto tmp3_382 = tmp3_381*tmp3_170;
        auto tmp3_383 = tmp3_374*tmp3_172;
        auto tmp3_384 = tmp3_271*tmp3_232;
        auto tmp3_385 = tmp3_384 + tmp3_382-tmp3_383;
        auto tmp3_386 = tmp3_385*tmp3_215;
        auto tmp3_387 = tmp3_381*tmp3_171;
        auto tmp3_388 = tmp3_370*tmp3_172;
        auto tmp3_389 = tmp3_281*tmp3_232;
        auto tmp3_390 = tmp3_389 + tmp3_387-tmp3_388;
        auto tmp3_391 = tmp3_390*tmp3_214;
        auto tmp3_392 = tmp3_288*tmp3_221;
        auto tmp3_393 = tmp3_378-tmp3_386 + tmp3_391-tmp3_392;
        auto tmp3_394 = tmp3_160*tmp3_393;
        auto tmp3_395 = tmp3_243*tmp3_252;
        auto tmp3_396 = tmp3_180*tmp3_258;
        auto tmp3_397 = tmp3_395-tmp3_396;
        auto tmp3_398 = tmp3_397*tmp3_170;
        auto tmp3_399 = tmp3_374*tmp3_231;
        auto tmp3_400 = tmp3_267*tmp3_232;
        auto tmp3_401 = tmp3_400 + tmp3_398-tmp3_399;
        auto tmp3_402 = tmp3_401*tmp3_215;
        auto tmp3_403 = tmp3_397*tmp3_171;
        auto tmp3_404 = tmp3_370*tmp3_231;
        auto tmp3_405 = tmp3_292*tmp3_232;
        auto tmp3_406 = tmp3_405 + tmp3_403-tmp3_404;
        auto tmp3_407 = tmp3_406*tmp3_214;
        auto tmp3_408 = tmp3_377*tmp3_165;
        auto tmp3_409 = tmp3_296*tmp3_221;
        auto tmp3_410 = -tmp3_402 + tmp3_407 + tmp3_408-tmp3_409;
        auto tmp3_411 = -tmp3_207*tmp3_410;
        auto tmp3_412 = tmp3_401*tmp3_220;
        auto tmp3_413 = tmp3_397*tmp3_172;
        auto tmp3_414 = tmp3_381*tmp3_231;
        auto tmp3_415 = tmp3_275*tmp3_232;
        auto tmp3_416 = tmp3_415 + tmp3_413-tmp3_414;
        auto tmp3_417 = tmp3_416*tmp3_214;
        auto tmp3_418 = tmp3_385*tmp3_165;
        auto tmp3_419 = tmp3_277*tmp3_221;
        auto tmp3_420 = -tmp3_412 + tmp3_417 + tmp3_418 + tmp3_419;
        auto tmp3_421 = tmp3_206*tmp3_420;
        auto tmp3_422 = tmp3_406*tmp3_220;
        auto tmp3_423 = tmp3_416*tmp3_215;
        auto tmp3_424 = tmp3_390*tmp3_165;
        auto tmp3_425 = tmp3_301*tmp3_221;
        auto tmp3_426 = -tmp3_422 + tmp3_423 + tmp3_424 + tmp3_425;
        auto tmp3_427 = -tmp3_201*tmp3_426;
        auto tmp3_428 = tmp3_427 + tmp3_421 + tmp3_411 + tmp3_367 + tmp3_394;
        auto tmp3_429 = tmp3_156*tmp3_428;
        auto tmp3_430 = -tmp3_208*tmp3_330;
        auto tmp3_431 = -tmp3_161*tmp3_393;
        auto tmp3_432 = tmp3_243*tmp3_253;
        auto tmp3_433 = tmp3_242*tmp3_258;
        auto tmp3_434 = tmp3_432-tmp3_433;
        auto tmp3_435 = tmp3_434*tmp3_170;
        auto tmp3_436 = tmp3_374*tmp3_173;
        auto tmp3_437 = tmp3_312*tmp3_232;
        auto tmp3_438 = tmp3_437 + tmp3_435-tmp3_436;
        auto tmp3_439 = tmp3_438*tmp3_215;
        auto tmp3_440 = tmp3_434*tmp3_171;
        auto tmp3_441 = tmp3_370*tmp3_173;
        auto tmp3_442 = tmp3_307*tmp3_232;
        auto tmp3_443 = tmp3_442 + tmp3_440-tmp3_441;
        auto tmp3_444 = tmp3_443*tmp3_214;
        auto tmp3_445 = tmp3_377*tmp3_166;
        auto tmp3_446 = tmp3_314*tmp3_221;
        auto tmp3_447 = -tmp3_439 + tmp3_444 + tmp3_445-tmp3_446;
        auto tmp3_448 = tmp3_207*tmp3_447;
        auto tmp3_449 = tmp3_438*tmp3_220;
        auto tmp3_450 = tmp3_434*tmp3_172;
        auto tmp3_451 = tmp3_381*tmp3_173;
        auto tmp3_452 = tmp3_318*tmp3_232;
        auto tmp3_453 = tmp3_452 + tmp3_450-tmp3_451;
        auto tmp3_454 = tmp3_453*tmp3_214;
        auto tmp3_455 = tmp3_385*tmp3_166;
        auto tmp3_456 = tmp3_322*tmp3_221;
        auto tmp3_457 = -tmp3_449 + tmp3_454 + tmp3_455-tmp3_456;
        auto tmp3_458 = -tmp3_206*tmp3_457;
        auto tmp3_459 = tmp3_443*tmp3_220;
        auto tmp3_460 = tmp3_453*tmp3_215;
        auto tmp3_461 = tmp3_390*tmp3_166;
        auto tmp3_462 = tmp3_328*tmp3_221;
        auto tmp3_463 = -tmp3_459 + tmp3_460 + tmp3_461-tmp3_462;
        auto tmp3_464 = tmp3_201*tmp3_463;
        auto tmp3_465 = tmp3_464 + tmp3_458 + tmp3_448 + tmp3_430 + tmp3_431;
        auto tmp3_466 = tmp3_155*tmp3_465;
        auto tmp3_467 = -tmp3_208*tmp3_347;
        auto tmp3_468 = tmp3_161*tmp3_410;
        auto tmp3_469 = -tmp3_160*tmp3_447;
        auto tmp3_470 = tmp3_401*tmp3_166;
        auto tmp3_471 = tmp3_438*tmp3_165;
        auto tmp3_472 = tmp3_434*tmp3_231;
        auto tmp3_473 = tmp3_397*tmp3_173;
        auto tmp3_474 = tmp3_334*tmp3_232;
        auto tmp3_475 = tmp3_474 + tmp3_472-tmp3_473;
        auto tmp3_476 = tmp3_475*tmp3_214;
        auto tmp3_477 = tmp3_338*tmp3_221;
        auto tmp3_478 = tmp3_470-tmp3_471 + tmp3_476-tmp3_477;
        auto tmp3_479 = tmp3_206*tmp3_478;
        auto tmp3_480 = tmp3_406*tmp3_166;
        auto tmp3_481 = tmp3_443*tmp3_165;
        auto tmp3_482 = tmp3_475*tmp3_215;
        auto tmp3_483 = tmp3_343*tmp3_221;
        auto tmp3_484 = tmp3_480-tmp3_481 + tmp3_482-tmp3_483;
        auto tmp3_485 = -tmp3_201*tmp3_484;
        auto tmp3_486 = tmp3_485 + tmp3_479 + tmp3_469 + tmp3_467 + tmp3_468;
        auto tmp3_487 = tmp3_194*tmp3_486;
        auto tmp3_488 = tmp3_208*tmp3_357;
        auto tmp3_489 = -tmp3_161*tmp3_420;
        auto tmp3_490 = tmp3_160*tmp3_457;
        auto tmp3_491 = -tmp3_207*tmp3_478;
        auto tmp3_492 = tmp3_416*tmp3_166;
        auto tmp3_493 = tmp3_453*tmp3_165;
        auto tmp3_494 = tmp3_475*tmp3_220;
        auto tmp3_495 = tmp3_353*tmp3_221;
        auto tmp3_496 = tmp3_492-tmp3_493 + tmp3_494-tmp3_495;
        auto tmp3_497 = tmp3_201*tmp3_496;
        auto tmp3_498 = tmp3_497 + tmp3_491 + tmp3_490 + tmp3_488 + tmp3_489;
        auto tmp3_499 = tmp3_193*tmp3_498;
        auto tmp3_500 = -tmp3_208*tmp3_363;
        auto tmp3_501 = tmp3_161*tmp3_426;
        auto tmp3_502 = -tmp3_160*tmp3_463;
        auto tmp3_503 = tmp3_207*tmp3_484;
        auto tmp3_504 = -tmp3_206*tmp3_496;
        auto tmp3_505 = tmp3_504 + tmp3_503 + tmp3_502 + tmp3_500 + tmp3_501;
        auto tmp3_506 = tmp3_192*tmp3_505;
        auto tmp3_507 = tmp3_506 + tmp3_499 + tmp3_487 + tmp3_466 + tmp3_366 + tmp3_429;
        auto __PowCall7 = SecDecInternalSqr(tmp3_187);
        auto __PowCall8 = SecDecInternalSqr(tmp3_200);
        auto __PowCall9 = SecDecInternalSqr(tmp3_213);
        auto __PowCall10 = SecDecInternalSqr(tmp3_226);
        auto __PowCall11 = SecDecInternalSqr(tmp3_237);
        auto __PowCall12 = SecDecInternalSqr(tmp3_248);
        auto tmp3_508 = tmp3_187*tmp1_11;
        auto tmp3_509 = tmp3_508*__PowCall12;
        auto tmp3_510 = __PowCall12*tmp3_103;
        auto tmp3_511 = tmp3_510 + tmp3_509;
        auto tmp3_512 = tmp3_213*tmp3_511;
        auto tmp3_513 = tmp3_226*tmp1_11;
        auto tmp3_514 = tmp3_226*tmp3_103;
        auto tmp3_515 = tmp1_11 + tmp3_514;
        auto tmp3_516 = tmp3_237*tmp3_515;
        auto tmp3_517 = tmp3_516 + tmp3_513 + tmp3_509 + tmp3_512;
        auto tmp3_518 = tmp3_200*tmp3_517;
        auto tmp3_519 = tmp3_213*tmp3_104;
        auto tmp3_520 = tmp3_187*tmp3_104;
        auto tmp3_521 = tmp3_519 + tmp3_105 + tmp3_520;
        auto tmp3_522 = tmp3_226*tmp3_521;
        auto tmp3_523 = tmp3_187 + 1;
        auto tmp3_524 = tmp3_104*tmp3_523;
        auto tmp3_525 = tmp3_213*tmp3_105;
        auto tmp3_526 = tmp3_525 + tmp3_524;
        auto tmp3_527 = tmp3_237*tmp3_526;
        auto tmp3_528 = tmp3_187*tmp3_106;
        auto tmp3_529 = tmp3_527 + tmp3_522 + tmp3_519 + tmp3_104 + tmp3_528;
        auto tmp3_530 = tmp3_200*tmp3_529;
        auto tmp3_531 = tmp3_508 + tmp3_103;
        auto tmp3_532 = tmp3_531*tmp3_213;
        auto tmp3_533 = __PowCall7 + __PowCall9 + 1;
        auto tmp3_534 = tmp3_533 + __PowCall8;
        auto tmp3_535 = msq*tmp3_534;
        auto tmp3_536 = tmp3_535 + tmp3_532 + tmp3_508;
        auto tmp3_537 = tmp3_226 + tmp3_237 + 1;
        auto tmp3_538 = tmp3_537*tmp3_536;
        auto tmp3_539 = tmp3_530 + tmp3_538;
        auto tmp3_540 = tmp3_248*tmp3_539;
        auto tmp3_541 = 1 + tmp3_213;
        auto tmp3_542 = tmp1_11*tmp3_541;
        auto tmp3_543 = tmp3_508 + tmp3_542;
        auto tmp3_544 = tmp3_523 + tmp3_213;
        auto tmp3_545 = tmp3_544*tmp3_514;
        auto tmp3_546 = tmp3_545 + tmp3_543;
        auto tmp3_547 = tmp3_237*tmp3_546;
        auto tmp3_548 = __PowCall10 + __PowCall11 + 1;
        auto tmp3_549 = __PowCall12*__PowCall8;
        auto tmp3_550 = tmp3_548 + tmp3_549;
        auto tmp3_551 = tmp3_550*tmp3_544;
        auto tmp3_552 = __PowCall12*tmp3_533;
        auto tmp3_553 = tmp3_552 + tmp3_548;
        auto tmp3_554 = tmp3_200*tmp3_553;
        auto tmp3_555 = tmp3_554 + tmp3_551;
        auto tmp3_556 = msq*tmp3_555;
        auto tmp3_557 = tmp3_226*tmp3_543;
        auto tmp3_558 = tmp3_540 + tmp3_556 + tmp3_518 + tmp3_557 + tmp3_547;
        auto __PowCall13 = SecDecInternalSqr(tmp3_558)*tmp3_558;
        auto __DenominatorCall1 = SecDecInternalDenominator(__PowCall13);
        auto tmp3_559 = -tmp3_126 + tmp3_558;
        auto tmp3_560 = tmp3_507*tmp3_182*__DenominatorCall1*tmp3_68*tmp3_264;
        auto _SignCheckExpression = SecDecInternalImagPart(tmp3_559);
        SecDecInternalSignCheckContourDeformation(!(_SignCheckExpression<=0), 1);
        auto tmp3_561 = SecDecInternalRealPart(tmp3_264);
        SecDecInternalSignCheckPositivePolynomial(!(tmp3_561>=0), 1);
        val = val + w*(tmp3_560);
    }
    // Sum up 128*8=1024 values across 4 warps.
    typedef cub::BlockReduce<result_t, 128, cub::BLOCK_REDUCE_RAKING_COMMUTATIVE_ONLY> Reduce;
    __shared__ typename Reduce::TempStorage shared;
    result_t sum = Reduce(shared).Sum(val);
    if (tid == 0) result[bid] = sum;
}
