#define SECDEC_RESULT_IS_COMPLEX 1
#include "common_cpu.h"

#define SecDecInternalSignCheckPositivePolynomial(cond, id) if (unlikely(cond)) {*presult = REAL_NAN; return 1; }
#define SecDecInternalSignCheckContourDeformation(cond, id) if (unlikely(cond)) {*presult = REAL_NAN; return 2; }

extern "C" int
doublebox_nonplanar_integral__sector_5_order_0(
    result_t * restrict presult,
    const uint64_t lattice,
    const uint64_t index1,
    const uint64_t index2,
    const uint64_t * restrict genvec,
    const real_t * restrict shift,
    const real_t * restrict realp,
    const complex_t * restrict complexp,
    const real_t * restrict deformp
)
{
    const real_t s = realp[0]; (void)s;
    const real_t t = realp[1]; (void)t;
    const real_t msq = realp[2]; (void)msq;
    const real_t SecDecInternalLambda0 = deformp[0];
    const real_t SecDecInternalLambda1 = deformp[1];
    const real_t SecDecInternalLambda2 = deformp[2];
    const real_t SecDecInternalLambda3 = deformp[3];
    const real_t SecDecInternalLambda4 = deformp[4];
    const real_t SecDecInternalLambda5 = deformp[5];
    const real_t invlattice = SecDecInternalDenominator((real_t)(double)lattice);
    resultvec_t acc = RESULTVEC_ZERO;
    uint64_t index = index1;
    int_t li_x0 = mulmod(genvec[0], index, lattice);
    int_t li_x1 = mulmod(genvec[1], index, lattice);
    int_t li_x2 = mulmod(genvec[2], index, lattice);
    int_t li_x3 = mulmod(genvec[3], index, lattice);
    int_t li_x4 = mulmod(genvec[4], index, lattice);
    int_t li_x5 = mulmod(genvec[5], index, lattice);
    for (; index < index2; index += 4) {
        int_t li_x0_0 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        int_t li_x0_1 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        int_t li_x0_2 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        int_t li_x0_3 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        realvec_t x0 = {{ li_x0_0*invlattice, li_x0_1*invlattice, li_x0_2*invlattice, li_x0_3*invlattice }};
        x0 = warponce(x0 + shift[0], 1);
        int_t li_x1_0 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        int_t li_x1_1 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        int_t li_x1_2 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        int_t li_x1_3 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        realvec_t x1 = {{ li_x1_0*invlattice, li_x1_1*invlattice, li_x1_2*invlattice, li_x1_3*invlattice }};
        x1 = warponce(x1 + shift[1], 1);
        int_t li_x2_0 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        int_t li_x2_1 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        int_t li_x2_2 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        int_t li_x2_3 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        realvec_t x2 = {{ li_x2_0*invlattice, li_x2_1*invlattice, li_x2_2*invlattice, li_x2_3*invlattice }};
        x2 = warponce(x2 + shift[2], 1);
        int_t li_x3_0 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        int_t li_x3_1 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        int_t li_x3_2 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        int_t li_x3_3 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        realvec_t x3 = {{ li_x3_0*invlattice, li_x3_1*invlattice, li_x3_2*invlattice, li_x3_3*invlattice }};
        x3 = warponce(x3 + shift[3], 1);
        int_t li_x4_0 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        int_t li_x4_1 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        int_t li_x4_2 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        int_t li_x4_3 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        realvec_t x4 = {{ li_x4_0*invlattice, li_x4_1*invlattice, li_x4_2*invlattice, li_x4_3*invlattice }};
        x4 = warponce(x4 + shift[4], 1);
        int_t li_x5_0 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        int_t li_x5_1 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        int_t li_x5_2 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        int_t li_x5_3 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        realvec_t x5 = {{ li_x5_0*invlattice, li_x5_1*invlattice, li_x5_2*invlattice, li_x5_3*invlattice }};
        x5 = warponce(x5 + shift[5], 1);
        auto w_x0 = korobov3x3_w(x0);
        auto w_x1 = korobov3x3_w(x1);
        auto w_x2 = korobov3x3_w(x2);
        auto w_x3 = korobov3x3_w(x3);
        auto w_x4 = korobov3x3_w(x4);
        auto w_x5 = korobov3x3_w(x5);
        realvec_t w = w_x0*w_x1*w_x2*w_x3*w_x4*w_x5;
        if (unlikely(index + 1 >= index2)) w.x[1] = 0;
        if (unlikely(index + 2 >= index2)) w.x[2] = 0;
        if (unlikely(index + 3 >= index2)) w.x[3] = 0;
        x0 = korobov3x3_f(x0);
        x1 = korobov3x3_f(x1);
        x2 = korobov3x3_f(x2);
        x3 = korobov3x3_f(x3);
        x4 = korobov3x3_f(x4);
        x5 = korobov3x3_f(x5);
        auto tmp1_1 = x2 + 1;
        auto tmp1_2 = tmp1_1 + x3;
        auto tmp1_3 = 2*msq;
        auto tmp1_4 = x1*tmp1_2*tmp1_3;
        auto tmp1_5 = 2*x0;
        auto tmp1_6 = tmp1_5*tmp1_1;
        auto tmp1_7 = tmp1_5 + 3;
        auto tmp1_8 = tmp1_7*x3;
        auto tmp1_9 = 3*tmp1_1;
        auto tmp3_1 = tmp1_8 + tmp1_6 + tmp1_9;
        auto tmp3_2 = 2*x4;
        auto tmp1_10 = tmp1_2*tmp3_2;
        auto tmp3_3 = tmp3_1 + tmp1_10;
        auto tmp1_11 = 2*x5;
        auto tmp1_12 = tmp1_2*tmp1_11;
        auto tmp3_4 = tmp1_12 + tmp3_3;
        auto tmp1_13 = tmp3_4*x1;
        auto tmp1_14 = 2*x3;
        auto tmp1_15 = tmp1_14*tmp1_1;
        auto tmp1_16 = 1 + 2*x2;
        auto tmp3_5 = tmp1_15 + tmp1_16;
        auto tmp3_6 = tmp1_13 + tmp3_5;
        auto tmp3_7 = tmp3_6*msq;
        auto tmp1_17 = x3*t;
        auto tmp3_8 = tmp3_7-tmp1_17;
        auto tmp1_18 = t*tmp1_1;
        auto tmp3_9 = tmp1_17 + tmp1_18;
        auto tmp1_19 = tmp3_9*x5;
        auto tmp3_10 = tmp1_19 + t;
        auto tmp1_20 = -x1*tmp3_10;
        auto tmp3_11 = tmp1_20 + tmp3_8;
        auto tmp1_21 = tmp1_5 + 1;
        auto tmp1_22 = tmp3_2 + tmp1_21;
        auto tmp1_23 = tmp1_22 + tmp1_11;
        auto tmp1_24 = tmp1_23*msq;
        auto tmp1_25 = x5*t;
        auto tmp1_26 = -tmp1_25 + tmp1_24;
        auto tmp3_12 = tmp1_22*x5;
        auto tmp3_13 = tmp1_21*x4;
        auto tmp3_14 = tmp3_13 + tmp3_12 + x0;
        auto tmp3_15 = tmp3_14*msq;
        auto tmp1_27 = x4*t;
        auto tmp1_28 = tmp1_27*x5;
        auto tmp3_16 = tmp3_15-tmp1_28;
        auto tmp1_29 = 2*tmp3_16;
        auto tmp1_30 = x5 + x4;
        auto tmp1_31 = x0 + 1;
        auto tmp1_32 = tmp1_31 + tmp1_30;
        auto tmp1_33 = tmp1_32*tmp1_3;
        auto tmp1_34 = 2*x1;
        auto tmp3_17 = tmp1_23*tmp1_34;
        auto tmp3_18 = tmp3_17 + tmp3_4;
        auto tmp3_19 = tmp3_18*msq;
        auto tmp3_20 = x2*s;
        auto tmp1_35 = -tmp3_20 + tmp3_19;
        auto tmp1_36 = tmp1_7 + tmp3_2;
        auto tmp1_37 = tmp1_11 + tmp1_36;
        auto tmp3_21 = tmp1_37*x1;
        auto tmp3_22 = tmp3_21 + 2*tmp1_2;
        auto tmp3_23 = tmp3_22*msq;
        auto tmp1_38 = -x1*s;
        auto tmp3_24 = tmp1_38 + tmp3_23;
        auto tmp3_25 = tmp3_1*x4;
        auto tmp3_26 = tmp3_3*x5;
        auto tmp3_27 = tmp1_9*x0;
        auto tmp1_39 = 1 + 3*x0;
        auto tmp1_40 = tmp1_39*x3;
        auto tmp3_28 = tmp3_27 + tmp3_25 + tmp3_26 + tmp1_40 + tmp1_1;
        auto tmp3_29 = tmp3_14*tmp1_34;
        auto tmp3_30 = tmp3_29 + tmp3_28;
        auto tmp3_31 = msq*tmp3_30;
        auto tmp3_32 = tmp3_9*x4;
        auto tmp3_33 = tmp3_32 + tmp1_17;
        auto tmp3_34 = tmp3_33*x5;
        auto tmp3_35 = x0*s;
        auto tmp1_41 = tmp3_35*x2;
        auto tmp3_36 = tmp1_27 + tmp1_41 + tmp3_34;
        auto tmp3_37 = x1*t;
        auto tmp1_42 = tmp3_37*x5;
        auto tmp1_43 = -tmp3_2*tmp1_42;
        auto tmp3_38 = tmp3_31 + tmp1_43-tmp3_36;
        auto tmp3_39 = tmp1_2 + tmp1_34;
        auto tmp3_40 = tmp3_39*msq;
        auto tmp1_44 = -x1*tmp3_33;
        auto tmp3_41 = tmp1_44 + tmp3_8;
        auto tmp1_45 = -tmp1_27 + tmp1_24;
        auto tmp3_42 = tmp1_36*x5;
        auto tmp3_43 = tmp1_7*x4;
        auto tmp3_44 = tmp3_42 + tmp3_43 + tmp1_39;
        auto tmp3_45 = tmp3_44*msq;
        auto tmp3_46 = tmp1_27 + t;
        auto tmp1_46 = -x5*tmp3_46;
        auto tmp3_47 = tmp1_46 + tmp3_45;
        auto tmp1_47 = tmp1_30*tmp1_2;
        auto tmp3_48 = tmp1_1*tmp1_31;
        auto tmp1_48 = tmp1_31*x3;
        auto tmp3_49 = tmp3_48 + tmp1_47 + tmp1_48;
        auto tmp3_50 = tmp3_44*x1;
        auto tmp3_51 = tmp3_50 + 2*tmp3_49;
        auto tmp3_52 = tmp3_51*msq;
        auto tmp3_53 = tmp3_35 + tmp1_28;
        auto tmp3_54 = -x1*tmp3_53;
        auto tmp3_55 = tmp3_54 + tmp3_52;
        auto tmp3_56 = msq*x1;
        auto tmp3_57 = -x1*tmp3_20;
        auto tmp3_58 = tmp3_57 + tmp3_8;
        auto tmp3_59 = -x1*tmp3_9;
        auto tmp3_60 = tmp3_59 + tmp1_4;
        auto tmp3_61 = tmp1_3-t;
        auto tmp1_49 = -tmp3_2*tmp3_37;
        auto tmp3_62 = tmp3_19 + tmp1_49-tmp3_33;
        auto tmp3_63 = tmp3_45-tmp3_53;
        auto tmp3_64 = -tmp1_42 + tmp3_23;
        auto tmp3_65 = -x1*x5;
        auto tmp3_66 = tmp3_65-1;
        auto tmp3_67 = tmp3_46*tmp3_66;
        auto tmp1_50 = -x0*t;
        auto tmp3_68 = tmp3_52-tmp1_25 + tmp1_50 + tmp3_67;
        auto tmp3_69 = -tmp1_11*tmp3_37;
        auto tmp3_70 = tmp3_19 + tmp3_69-tmp3_10;
        auto tmp3_71 = tmp3_23-t;
        auto tmp3_72 = -tmp1_42 + tmp3_71;
        auto tmp3_73 = -x1*tmp1_27;
        auto tmp3_74 = tmp3_73 + tmp3_23;
        auto tmp3_75 = -x1*tmp3_46;
        auto tmp3_76 = tmp3_75 + tmp3_71;
        auto tmp3_77 = x1*tmp3_28;
        auto tmp3_78 = tmp1_16*tmp1_31;
        auto tmp3_79 = tmp3_5*tmp1_30;
        auto tmp3_80 = tmp3_48*tmp1_14;
        auto tmp3_81 = tmp3_77 + tmp3_80 + tmp3_79 + tmp3_78;
        auto tmp3_82 = msq*tmp3_81;
        auto tmp3_83 = -x1*tmp3_36;
        auto tmp3_84 = -tmp1_17*tmp1_30;
        auto tmp3_85 = -t*tmp1_48;
        auto tmp3_86 = tmp3_82 + tmp3_83 + tmp3_85 + tmp3_84;
        auto tmp3_87 = tmp1_2*tmp3_56;
        auto tmp3_88 = tmp1_32*msq;
        auto tmp3_89 = 3*msq;
        auto tmp3_90 = tmp3_89-t;
        auto tmp3_91 = -s + tmp3_89;
        auto tmp3_92 = x1*SecDecInternalLambda1;
        auto tmp3_93 = -SecDecInternalLambda1 + tmp3_92;
        auto tmp3_94 = x5*SecDecInternalLambda5;
        auto tmp3_95 = -1 + tmp1_11;
        auto tmp3_96 = SecDecInternalLambda5*tmp3_95;
        auto tmp3_97 = x4*SecDecInternalLambda4;
        auto tmp3_98 = -1 + tmp3_2;
        auto tmp3_99 = SecDecInternalLambda4*tmp3_98;
        auto tmp3_100 = x3*SecDecInternalLambda3;
        auto tmp3_101 = -SecDecInternalLambda3 + 2*tmp3_100;
        auto tmp3_102 = x2*SecDecInternalLambda2;
        auto tmp3_103 = -SecDecInternalLambda2 + 2*tmp3_102;
        auto tmp3_104 = -1 + tmp1_34;
        auto tmp3_105 = SecDecInternalLambda1*tmp3_104;
        auto tmp3_106 = x0*SecDecInternalLambda0;
        auto tmp3_107 = -1 + tmp1_5;
        auto tmp3_108 = SecDecInternalLambda0*tmp3_107;
        auto __PowCall1 = SecDecInternalSqr(x0);
        auto __PowCall2 = SecDecInternalSqr(x1);
        auto __PowCall3 = SecDecInternalSqr(x2);
        auto __PowCall4 = SecDecInternalSqr(x3);
        auto __PowCall5 = SecDecInternalSqr(x4);
        auto __PowCall6 = SecDecInternalSqr(x5);
        auto tmp2_23 = __PowCall6 + __PowCall1 + __PowCall5;
        auto tmp2_24 = msq*tmp2_23;
        auto tmp2_25 = tmp3_16 + tmp2_24;
        auto tmp3_109 = __PowCall2*tmp2_25;
        auto tmp2_26 = tmp3_87*tmp2_23;
        auto tmp2_27 = __PowCall3 + __PowCall4;
        auto tmp2_28 = tmp3_88*tmp2_27;
        auto tmp3_110 = tmp3_86 + tmp2_28 + tmp2_26 + tmp3_109;
        auto tmp3_111 = tmp1_3*__PowCall2;
        auto tmp3_112 = tmp3_111 + tmp1_4;
        auto tmp3_113 = tmp2_23*tmp3_56;
        auto tmp2_29 = tmp3_113 + tmp3_68;
        auto tmp2_30 = tmp3_63 + tmp2_24;
        auto tmp2_31 = tmp3_61*__PowCall2;
        auto tmp3_114 = tmp3_60 + tmp2_31;
        auto tmp3_115 = msq*tmp2_27;
        auto tmp2_32 = tmp1_24*__PowCall2;
        auto tmp3_116 = tmp2_32 + tmp3_58 + tmp3_115;
        auto tmp3_117 = tmp3_113 + tmp3_55;
        auto tmp3_118 = tmp3_47 + tmp2_24;
        auto tmp2_33 = tmp1_45*__PowCall2;
        auto tmp3_119 = tmp2_33 + tmp3_41 + tmp3_115;
        auto tmp2_34 = tmp3_40*tmp2_23;
        auto tmp3_120 = tmp2_34 + tmp3_38;
        auto tmp3_121 = tmp1_3*tmp2_23;
        auto tmp3_122 = tmp1_29 + tmp3_121;
        auto tmp2_35 = tmp1_26*__PowCall2;
        auto tmp3_123 = tmp2_35 + tmp3_11 + tmp3_115;
        auto __RealPartCall1 = SecDecInternalRealPart(tmp3_76);
        auto __RealPartCall2 = SecDecInternalRealPart(tmp3_71);
        auto __RealPartCall3 = SecDecInternalRealPart(tmp3_74);
        auto __RealPartCall4 = SecDecInternalRealPart(tmp1_33);
        auto __RealPartCall6 = SecDecInternalRealPart(tmp3_72);
        auto __RealPartCall7 = SecDecInternalRealPart(tmp3_70);
        auto __RealPartCall9 = SecDecInternalRealPart(tmp3_64);
        auto __RealPartCall11 = SecDecInternalRealPart(tmp3_62);
        auto __RealPartCall20 = SecDecInternalRealPart(tmp3_24);
        auto __RealPartCall21 = SecDecInternalRealPart(tmp1_35);
        auto __RealPartCall23 = SecDecInternalRealPart(tmp1_33);
        auto __RealPartCall24 = SecDecInternalRealPart(tmp1_33);
        auto tmp3_124 = __PowCall1*SecDecInternalLambda0;
        auto tmp3_125 = tmp3_124-tmp3_106;
        auto tmp3_126 = SecDecInternalI(__RealPartCall21);
        auto tmp3_127 = tmp3_125*tmp3_126;
        auto tmp3_128 = SecDecInternalI(tmp3_125);
        auto tmp3_129 = __RealPartCall20*tmp3_128;
        auto tmp3_130 = __RealPartCall2*tmp3_128;
        auto tmp3_131 = __PowCall2*SecDecInternalLambda1;
        auto tmp3_132 = tmp3_131-tmp3_92;
        auto tmp3_133 = tmp3_132*tmp3_126;
        auto tmp3_134 = SecDecInternalI(__RealPartCall7);
        auto tmp3_135 = tmp3_132*tmp3_134;
        auto tmp3_136 = SecDecInternalI(__RealPartCall11);
        auto tmp3_137 = tmp3_132*tmp3_136;
        auto tmp3_138 = __PowCall3*SecDecInternalLambda2;
        auto tmp3_139 = tmp3_138-tmp3_102;
        auto tmp3_140 = SecDecInternalI(tmp3_139);
        auto tmp3_141 = __RealPartCall20*tmp3_140;
        auto tmp3_142 = __RealPartCall23*tmp3_140;
        auto tmp3_143 = __RealPartCall9*tmp3_140;
        auto tmp3_144 = __RealPartCall3*tmp3_140;
        auto tmp3_145 = __PowCall4*SecDecInternalLambda3;
        auto tmp3_146 = tmp3_145-tmp3_100;
        auto tmp3_147 = SecDecInternalI(tmp3_146);
        auto tmp3_148 = __RealPartCall2*tmp3_147;
        auto tmp3_149 = __RealPartCall23*tmp3_147;
        auto tmp3_150 = __RealPartCall6*tmp3_147;
        auto tmp3_151 = __RealPartCall1*tmp3_147;
        auto tmp3_152 = __PowCall5*SecDecInternalLambda4;
        auto tmp3_153 = tmp3_152-tmp3_97;
        auto tmp3_154 = tmp3_153*tmp3_134;
        auto tmp3_155 = SecDecInternalI(tmp3_153);
        auto tmp3_156 = __RealPartCall9*tmp3_155;
        auto tmp3_157 = __RealPartCall6*tmp3_155;
        auto tmp3_158 = __PowCall6*SecDecInternalLambda5;
        auto tmp3_159 = tmp3_158-tmp3_94;
        auto tmp3_160 = tmp3_159*tmp3_136;
        auto tmp3_161 = SecDecInternalI(tmp3_159);
        auto tmp3_162 = __RealPartCall3*tmp3_161;
        auto tmp3_163 = __RealPartCall1*tmp3_161;
        auto __RealPartCall5 = SecDecInternalRealPart(tmp3_112);
        auto __RealPartCall8 = SecDecInternalRealPart(tmp2_29);
        auto __RealPartCall10 = SecDecInternalRealPart(tmp2_30);
        auto __RealPartCall12 = SecDecInternalRealPart(tmp3_114);
        auto __RealPartCall13 = SecDecInternalRealPart(tmp3_116);
        auto __RealPartCall14 = SecDecInternalRealPart(tmp3_117);
        auto __RealPartCall15 = SecDecInternalRealPart(tmp3_112);
        auto __RealPartCall16 = SecDecInternalRealPart(tmp3_118);
        auto __RealPartCall17 = SecDecInternalRealPart(tmp3_119);
        auto __RealPartCall18 = SecDecInternalRealPart(tmp3_120);
        auto __RealPartCall19 = SecDecInternalRealPart(tmp3_112);
        auto __RealPartCall22 = SecDecInternalRealPart(tmp3_112);
        auto __RealPartCall25 = SecDecInternalRealPart(tmp3_122);
        auto __RealPartCall26 = SecDecInternalRealPart(tmp3_123);
        auto __RealPartCall27 = SecDecInternalRealPart(tmp3_112);
        auto tmp3_164 = SecDecInternalI(tmp3_93*__RealPartCall18);
        auto tmp3_165 = 1 + tmp3_164;
        auto tmp3_166 = __PowCall1*SecDecInternalLambda0;
        auto tmp3_167 = tmp3_166-tmp3_106;
        auto tmp3_168 = SecDecInternalI(tmp3_167);
        auto tmp3_169 = __RealPartCall13*tmp3_168;
        auto tmp3_170 = x0 + tmp3_169;
        auto tmp3_171 = __RealPartCall22*tmp3_167;
        auto tmp3_172 = __RealPartCall13*tmp3_108;
        auto tmp3_173 = tmp3_172 + tmp3_171;
        auto tmp3_174 = SecDecInternalI(tmp3_173);
        auto tmp3_175 = 1 + tmp3_174;
        auto tmp3_176 = __RealPartCall19*tmp3_168;
        auto tmp3_177 = __RealPartCall15*tmp3_168;
        auto tmp3_178 = __PowCall2*SecDecInternalLambda1;
        auto tmp3_179 = tmp3_178-tmp3_92;
        auto tmp3_180 = SecDecInternalI(tmp3_179);
        auto tmp3_181 = __RealPartCall18*tmp3_180;
        auto tmp3_182 = x1 + tmp3_181;
        auto tmp3_183 = __RealPartCall25*tmp3_179;
        auto tmp3_184 = __RealPartCall18*tmp3_105;
        auto tmp3_185 = tmp3_184 + tmp3_183;
        auto tmp3_186 = SecDecInternalI(tmp3_185);
        auto tmp3_187 = 1 + tmp3_186;
        auto tmp3_188 = __RealPartCall10*tmp3_180;
        auto tmp3_189 = __RealPartCall16*tmp3_180;
        auto tmp3_190 = __PowCall3*SecDecInternalLambda2;
        auto tmp3_191 = tmp3_190-tmp3_102;
        auto tmp3_192 = SecDecInternalI(tmp3_191);
        auto tmp3_193 = __RealPartCall14*tmp3_192;
        auto tmp3_194 = x2 + tmp3_193;
        auto tmp3_195 = __RealPartCall10*tmp3_192;
        auto tmp3_196 = __RealPartCall24*tmp3_191;
        auto tmp3_197 = __RealPartCall14*tmp3_103;
        auto tmp3_198 = tmp3_197 + tmp3_196;
        auto tmp3_199 = SecDecInternalI(tmp3_198);
        auto tmp3_200 = 1 + tmp3_199;
        auto tmp3_201 = __PowCall4*SecDecInternalLambda3;
        auto tmp3_202 = tmp3_201-tmp3_100;
        auto tmp3_203 = SecDecInternalI(tmp3_202);
        auto tmp3_204 = __RealPartCall8*tmp3_203;
        auto tmp3_205 = x3 + tmp3_204;
        auto tmp3_206 = __RealPartCall16*tmp3_203;
        auto tmp3_207 = __RealPartCall4*tmp3_202;
        auto tmp3_208 = __RealPartCall8*tmp3_101;
        auto tmp3_209 = tmp3_208 + tmp3_207;
        auto tmp3_210 = SecDecInternalI(tmp3_209);
        auto tmp3_211 = 1 + tmp3_210;
        auto tmp3_212 = __PowCall5*SecDecInternalLambda4;
        auto tmp3_213 = tmp3_212-tmp3_97;
        auto tmp3_214 = SecDecInternalI(tmp3_213);
        auto tmp3_215 = __RealPartCall26*tmp3_214;
        auto tmp3_216 = x4 + tmp3_215;
        auto tmp3_217 = __RealPartCall19*tmp3_214;
        auto tmp3_218 = __RealPartCall5*tmp3_213;
        auto tmp3_219 = __RealPartCall26*tmp3_99;
        auto tmp3_220 = tmp3_219 + tmp3_218;
        auto tmp3_221 = SecDecInternalI(tmp3_220);
        auto tmp3_222 = 1 + tmp3_221;
        auto tmp3_223 = __RealPartCall12*tmp3_214;
        auto tmp3_224 = __PowCall6*SecDecInternalLambda5;
        auto tmp3_225 = tmp3_224-tmp3_94;
        auto tmp3_226 = SecDecInternalI(tmp3_225);
        auto tmp3_227 = __RealPartCall17*tmp3_226;
        auto tmp3_228 = x5 + tmp3_227;
        auto tmp2_36 = __RealPartCall15*tmp3_226;
        auto tmp3_229 = __RealPartCall12*tmp3_226;
        auto tmp3_230 = __RealPartCall27*tmp3_225;
        auto tmp2_37 = __RealPartCall17*tmp3_96;
        auto tmp3_231 = tmp2_37 + tmp3_230;
        auto tmp3_232 = SecDecInternalI(tmp3_231);
        auto tmp3_233 = 1 + tmp3_232;
        auto tmp3_234 = tmp3_170 + tmp3_216 + tmp3_228;
        auto tmp3_235 = 1 + tmp3_234;
        auto tmp3_236 = tmp3_205 + tmp3_194 + 1;
        auto tmp3_237 = tmp3_236*tmp3_235;
        auto tmp3_238 = tmp3_182*tmp3_234;
        auto tmp3_239 = tmp3_238 + tmp3_237;
        auto tmp3_240 = tmp3_156*tmp3_160;
        auto tmp3_241 = tmp3_154*tmp3_162;
        auto tmp3_242 = tmp3_240-tmp3_241;
        auto tmp3_243 = tmp3_242*tmp3_148;
        auto tmp3_244 = tmp3_156*tmp2_36;
        auto tmp3_245 = tmp3_217*tmp3_162;
        auto tmp3_246 = tmp3_244-tmp3_245;
        auto tmp3_247 = tmp3_246*tmp3_206;
        auto tmp3_248 = tmp3_154*tmp2_36;
        auto tmp3_249 = tmp3_217*tmp3_160;
        auto tmp3_250 = tmp3_248-tmp3_249;
        auto tmp3_251 = tmp3_250*tmp3_149;
        auto tmp3_252 = tmp3_251 + tmp3_243-tmp3_247;
        auto tmp3_253 = tmp3_252*tmp3_142;
        auto tmp3_254 = tmp3_157*tmp2_36;
        auto tmp3_255 = tmp3_217*tmp3_163;
        auto tmp3_256 = tmp3_254-tmp3_255;
        auto tmp3_257 = tmp3_256*tmp3_149;
        auto tmp3_258 = tmp3_246*tmp3_211;
        auto tmp3_259 = tmp3_157*tmp3_162;
        auto tmp3_260 = tmp3_156*tmp3_163;
        auto tmp3_261 = tmp3_259-tmp3_260;
        auto tmp3_262 = tmp3_261*tmp3_148;
        auto tmp3_263 = -tmp3_262 + tmp3_257-tmp3_258;
        auto tmp3_264 = tmp3_263*tmp3_195;
        auto tmp3_265 = tmp3_157*tmp3_160;
        auto tmp3_266 = tmp3_154*tmp3_163;
        auto tmp3_267 = tmp3_265-tmp3_266;
        auto tmp3_268 = tmp3_267*tmp3_148;
        auto tmp3_269 = tmp3_256*tmp3_206;
        auto tmp3_270 = tmp3_250*tmp3_211;
        auto tmp3_271 = tmp3_270 + tmp3_268-tmp3_269;
        auto tmp3_272 = tmp3_271*tmp3_200;
        auto tmp3_273 = tmp3_267*tmp3_149;
        auto tmp3_274 = tmp3_242*tmp3_211;
        auto tmp3_275 = tmp3_261*tmp3_206;
        auto tmp3_276 = -tmp3_275 + tmp3_273-tmp3_274;
        auto tmp3_277 = tmp3_276*tmp3_141;
        auto tmp3_278 = -tmp3_277-tmp3_253 + tmp3_264 + tmp3_272;
        auto tmp3_279 = tmp3_135*tmp3_278;
        auto tmp3_280 = tmp3_222*tmp3_160;
        auto tmp3_281 = tmp3_154*tmp3_229;
        auto tmp3_282 = tmp3_280-tmp3_281;
        auto tmp3_283 = tmp3_282*tmp3_148;
        auto tmp3_284 = tmp3_250*tmp3_150;
        auto tmp3_285 = tmp3_222*tmp2_36;
        auto tmp3_286 = tmp3_217*tmp3_229;
        auto tmp3_287 = tmp3_285-tmp3_286;
        auto tmp3_288 = tmp3_287*tmp3_206;
        auto tmp3_289 = -tmp3_288 + tmp3_283 + tmp3_284;
        auto tmp3_290 = tmp3_289*tmp3_200;
        auto tmp3_291 = tmp3_222*tmp3_162;
        auto tmp3_292 = tmp3_156*tmp3_229;
        auto tmp3_293 = tmp3_291-tmp3_292;
        auto tmp3_294 = tmp3_293*tmp3_148;
        auto tmp3_295 = tmp3_287*tmp3_149;
        auto tmp3_296 = tmp3_246*tmp3_150;
        auto tmp3_297 = tmp3_296 + tmp3_294-tmp3_295;
        auto tmp3_298 = tmp3_297*tmp3_195;
        auto tmp3_299 = tmp3_252*tmp3_143;
        auto tmp3_300 = tmp3_293*tmp3_206;
        auto tmp3_301 = tmp3_282*tmp3_149;
        auto tmp3_302 = tmp3_242*tmp3_150;
        auto tmp3_303 = tmp3_302 + tmp3_300-tmp3_301;
        auto tmp3_304 = tmp3_303*tmp3_141;
        auto tmp3_305 = -tmp3_290 + tmp3_298 + tmp3_299-tmp3_304;
        auto tmp3_306 = tmp3_189*tmp3_305;
        auto tmp3_307 = tmp3_222*tmp3_163;
        auto tmp3_308 = tmp3_157*tmp3_229;
        auto tmp3_309 = tmp3_307-tmp3_308;
        auto tmp3_310 = tmp3_309*tmp3_148;
        auto tmp3_311 = tmp3_287*tmp3_211;
        auto tmp3_312 = tmp3_256*tmp3_150;
        auto tmp3_313 = tmp3_312 + tmp3_310-tmp3_311;
        auto tmp3_314 = tmp3_313*tmp3_195;
        auto tmp3_315 = tmp3_309*tmp3_206;
        auto tmp3_316 = tmp3_282*tmp3_211;
        auto tmp3_317 = tmp3_267*tmp3_150;
        auto tmp3_318 = tmp3_317 + tmp3_315-tmp3_316;
        auto tmp3_319 = tmp3_318*tmp3_141;
        auto tmp3_320 = tmp3_289*tmp3_142;
        auto tmp3_321 = tmp3_271*tmp3_143;
        auto tmp3_322 = -tmp3_314 + tmp3_319 + tmp3_320-tmp3_321;
        auto tmp3_323 = tmp3_188*tmp3_322;
        auto tmp3_324 = tmp3_313*tmp3_200;
        auto tmp3_325 = tmp3_309*tmp3_149;
        auto tmp3_326 = tmp3_293*tmp3_211;
        auto tmp3_327 = tmp3_261*tmp3_150;
        auto tmp3_328 = tmp3_327 + tmp3_325-tmp3_326;
        auto tmp3_329 = tmp3_328*tmp3_141;
        auto tmp3_330 = tmp3_297*tmp3_142;
        auto tmp3_331 = tmp3_263*tmp3_143;
        auto tmp3_332 = -tmp3_324 + tmp3_329 + tmp3_330 + tmp3_331;
        auto tmp3_333 = -tmp3_187*tmp3_332;
        auto tmp3_334 = tmp3_318*tmp3_200;
        auto tmp3_335 = tmp3_328*tmp3_195;
        auto tmp3_336 = tmp3_303*tmp3_142;
        auto tmp3_337 = tmp3_276*tmp3_143;
        auto tmp3_338 = -tmp3_334 + tmp3_335 + tmp3_336 + tmp3_337;
        auto tmp3_339 = tmp3_133*tmp3_338;
        auto tmp3_340 = tmp3_339 + tmp3_333 + tmp3_323 + tmp3_279 + tmp3_306;
        auto tmp3_341 = tmp3_177*tmp3_340;
        auto tmp3_342 = -tmp3_137*tmp3_278;
        auto tmp3_343 = tmp3_223*tmp3_160;
        auto tmp3_344 = tmp3_154*tmp3_233;
        auto tmp3_345 = tmp3_343-tmp3_344;
        auto tmp3_346 = tmp3_345*tmp3_148;
        auto tmp3_347 = tmp3_223*tmp2_36;
        auto tmp3_348 = tmp3_217*tmp3_233;
        auto tmp3_349 = tmp3_347-tmp3_348;
        auto tmp3_350 = tmp3_349*tmp3_206;
        auto tmp3_351 = tmp3_250*tmp3_151;
        auto tmp3_352 = tmp3_351 + tmp3_346-tmp3_350;
        auto tmp3_353 = tmp3_352*tmp3_200;
        auto tmp3_354 = tmp3_223*tmp3_162;
        auto tmp3_355 = tmp3_156*tmp3_233;
        auto tmp3_356 = tmp3_354-tmp3_355;
        auto tmp3_357 = tmp3_356*tmp3_148;
        auto tmp3_358 = tmp3_349*tmp3_149;
        auto tmp3_359 = tmp3_246*tmp3_151;
        auto tmp3_360 = tmp3_359 + tmp3_357-tmp3_358;
        auto tmp3_361 = tmp3_360*tmp3_195;
        auto tmp3_362 = tmp3_356*tmp3_206;
        auto tmp3_363 = tmp3_345*tmp3_149;
        auto tmp3_364 = tmp3_242*tmp3_151;
        auto tmp3_365 = tmp3_364 + tmp3_362-tmp3_363;
        auto tmp3_366 = tmp3_365*tmp3_141;
        auto tmp3_367 = tmp3_252*tmp3_144;
        auto tmp3_368 = tmp3_353-tmp3_361 + tmp3_366-tmp3_367;
        auto tmp3_369 = tmp3_189*tmp3_368;
        auto tmp3_370 = tmp3_223*tmp3_163;
        auto tmp3_371 = tmp3_157*tmp3_233;
        auto tmp3_372 = tmp3_370-tmp3_371;
        auto tmp3_373 = tmp3_372*tmp3_148;
        auto tmp3_374 = tmp3_349*tmp3_211;
        auto tmp3_375 = tmp3_256*tmp3_151;
        auto tmp3_376 = tmp3_375 + tmp3_373-tmp3_374;
        auto tmp3_377 = tmp3_376*tmp3_195;
        auto tmp3_378 = tmp3_372*tmp3_206;
        auto tmp3_379 = tmp3_345*tmp3_211;
        auto tmp3_380 = tmp3_267*tmp3_151;
        auto tmp3_381 = tmp3_380 + tmp3_378-tmp3_379;
        auto tmp3_382 = tmp3_381*tmp3_141;
        auto tmp3_383 = tmp3_352*tmp3_142;
        auto tmp3_384 = tmp3_271*tmp3_144;
        auto tmp3_385 = -tmp3_377 + tmp3_382 + tmp3_383-tmp3_384;
        auto tmp3_386 = -tmp3_188*tmp3_385;
        auto tmp3_387 = tmp3_376*tmp3_200;
        auto tmp3_388 = tmp3_372*tmp3_149;
        auto tmp3_389 = tmp3_356*tmp3_211;
        auto tmp3_390 = tmp3_261*tmp3_151;
        auto tmp3_391 = tmp3_390 + tmp3_388-tmp3_389;
        auto tmp3_392 = tmp3_391*tmp3_141;
        auto tmp3_393 = tmp3_360*tmp3_142;
        auto tmp3_394 = tmp3_263*tmp3_144;
        auto tmp3_395 = -tmp3_387 + tmp3_392 + tmp3_393 + tmp3_394;
        auto tmp3_396 = tmp3_187*tmp3_395;
        auto tmp3_397 = tmp3_381*tmp3_200;
        auto tmp3_398 = tmp3_391*tmp3_195;
        auto tmp3_399 = tmp3_365*tmp3_142;
        auto tmp3_400 = tmp3_276*tmp3_144;
        auto tmp3_401 = -tmp3_397 + tmp3_398 + tmp3_399 + tmp3_400;
        auto tmp3_402 = -tmp3_133*tmp3_401;
        auto tmp3_403 = tmp3_402 + tmp3_396 + tmp3_386 + tmp3_342 + tmp3_369;
        auto tmp3_404 = tmp3_176*tmp3_403;
        auto tmp3_405 = -tmp3_137*tmp3_305;
        auto tmp3_406 = -tmp3_135*tmp3_368;
        auto tmp3_407 = tmp3_223*tmp3_229;
        auto tmp3_408 = tmp3_222*tmp3_233;
        auto tmp3_409 = tmp3_407-tmp3_408;
        auto tmp3_410 = tmp3_409*tmp3_148;
        auto tmp3_411 = tmp3_349*tmp3_150;
        auto tmp3_412 = tmp3_287*tmp3_151;
        auto tmp3_413 = tmp3_412 + tmp3_410-tmp3_411;
        auto tmp3_414 = tmp3_413*tmp3_195;
        auto tmp3_415 = tmp3_409*tmp3_206;
        auto tmp3_416 = tmp3_345*tmp3_150;
        auto tmp3_417 = tmp3_282*tmp3_151;
        auto tmp3_418 = tmp3_417 + tmp3_415-tmp3_416;
        auto tmp3_419 = tmp3_418*tmp3_141;
        auto tmp3_420 = tmp3_352*tmp3_143;
        auto tmp3_421 = tmp3_289*tmp3_144;
        auto tmp3_422 = -tmp3_414 + tmp3_419 + tmp3_420-tmp3_421;
        auto tmp3_423 = tmp3_188*tmp3_422;
        auto tmp3_424 = tmp3_413*tmp3_200;
        auto tmp3_425 = tmp3_409*tmp3_149;
        auto tmp3_426 = tmp3_356*tmp3_150;
        auto tmp3_427 = tmp3_293*tmp3_151;
        auto tmp3_428 = tmp3_427 + tmp3_425-tmp3_426;
        auto tmp3_429 = tmp3_428*tmp3_141;
        auto tmp3_430 = tmp3_360*tmp3_143;
        auto tmp3_431 = tmp3_297*tmp3_144;
        auto tmp3_432 = -tmp3_424 + tmp3_429 + tmp3_430-tmp3_431;
        auto tmp3_433 = -tmp3_187*tmp3_432;
        auto tmp3_434 = tmp3_418*tmp3_200;
        auto tmp3_435 = tmp3_428*tmp3_195;
        auto tmp3_436 = tmp3_365*tmp3_143;
        auto tmp3_437 = tmp3_303*tmp3_144;
        auto tmp3_438 = -tmp3_434 + tmp3_435 + tmp3_436-tmp3_437;
        auto tmp3_439 = tmp3_133*tmp3_438;
        auto tmp3_440 = tmp3_439 + tmp3_433 + tmp3_423 + tmp3_405 + tmp3_406;
        auto tmp3_441 = tmp3_130*tmp3_440;
        auto tmp3_442 = -tmp3_137*tmp3_322;
        auto tmp3_443 = tmp3_135*tmp3_385;
        auto tmp3_444 = -tmp3_189*tmp3_422;
        auto tmp3_445 = tmp3_376*tmp3_143;
        auto tmp3_446 = tmp3_413*tmp3_142;
        auto tmp3_447 = tmp3_409*tmp3_211;
        auto tmp3_448 = tmp3_372*tmp3_150;
        auto tmp3_449 = tmp3_309*tmp3_151;
        auto tmp3_450 = tmp3_449 + tmp3_447-tmp3_448;
        auto tmp3_451 = tmp3_450*tmp3_141;
        auto tmp3_452 = tmp3_313*tmp3_144;
        auto tmp3_453 = tmp3_445-tmp3_446 + tmp3_451-tmp3_452;
        auto tmp3_454 = tmp3_187*tmp3_453;
        auto tmp3_455 = tmp3_381*tmp3_143;
        auto tmp3_456 = tmp3_418*tmp3_142;
        auto tmp3_457 = tmp3_450*tmp3_195;
        auto tmp3_458 = tmp3_318*tmp3_144;
        auto tmp3_459 = tmp3_455-tmp3_456 + tmp3_457-tmp3_458;
        auto tmp3_460 = -tmp3_133*tmp3_459;
        auto tmp3_461 = tmp3_460 + tmp3_454 + tmp3_444 + tmp3_442 + tmp3_443;
        auto tmp3_462 = tmp3_129*tmp3_461;
        auto tmp3_463 = tmp3_137*tmp3_332;
        auto tmp3_464 = -tmp3_135*tmp3_395;
        auto tmp3_465 = tmp3_189*tmp3_432;
        auto tmp3_466 = -tmp3_188*tmp3_453;
        auto tmp3_467 = tmp3_391*tmp3_143;
        auto tmp3_468 = tmp3_428*tmp3_142;
        auto tmp3_469 = tmp3_450*tmp3_200;
        auto tmp3_470 = tmp3_328*tmp3_144;
        auto tmp3_471 = tmp3_467-tmp3_468 + tmp3_469-tmp3_470;
        auto tmp3_472 = tmp3_133*tmp3_471;
        auto tmp3_473 = tmp3_472 + tmp3_466 + tmp3_465 + tmp3_463 + tmp3_464;
        auto tmp3_474 = tmp3_127*tmp3_473;
        auto tmp3_475 = -tmp3_137*tmp3_338;
        auto tmp3_476 = tmp3_135*tmp3_401;
        auto tmp3_477 = -tmp3_189*tmp3_438;
        auto tmp3_478 = tmp3_188*tmp3_459;
        auto tmp3_479 = -tmp3_187*tmp3_471;
        auto tmp3_480 = tmp3_479 + tmp3_478 + tmp3_477 + tmp3_475 + tmp3_476;
        auto tmp3_481 = tmp3_175*tmp3_480;
        auto tmp3_482 = tmp3_481 + tmp3_474 + tmp3_462 + tmp3_441 + tmp3_341 + tmp3_404;
        auto __PowCall7 = SecDecInternalSqr(tmp3_170);
        auto __PowCall8 = SecDecInternalSqr(tmp3_182);
        auto __PowCall9 = SecDecInternalSqr(tmp3_194);
        auto __PowCall10 = SecDecInternalSqr(tmp3_205);
        auto __PowCall11 = SecDecInternalSqr(tmp3_216);
        auto __PowCall12 = SecDecInternalSqr(tmp3_228);
        auto tmp3_483 = tmp3_194 + 1;
        auto tmp3_484 = tmp3_170*tmp1_3;
        auto tmp3_485 = tmp3_484 + tmp3_89;
        auto tmp3_486 = tmp3_485*tmp3_483;
        auto tmp3_487 = tmp3_216*tmp3_61;
        auto tmp3_488 = tmp3_205 + 1;
        auto tmp3_489 = tmp3_488 + tmp3_194;
        auto tmp3_490 = tmp3_489*tmp3_487;
        auto tmp3_491 = tmp3_484 + tmp3_90;
        auto tmp3_492 = tmp3_205*tmp3_491;
        auto tmp3_493 = tmp3_490 + tmp3_492 + tmp3_486;
        auto tmp3_494 = tmp3_228*tmp3_493;
        auto tmp3_495 = tmp3_89*tmp3_488;
        auto tmp3_496 = tmp3_194*tmp3_91;
        auto tmp3_497 = tmp3_496 + tmp3_495;
        auto tmp3_498 = tmp3_170*tmp3_497;
        auto tmp3_499 = tmp3_205 + tmp3_194;
        auto tmp3_500 = tmp3_485*tmp3_499;
        auto tmp3_501 = tmp3_500 + tmp3_491;
        auto tmp3_502 = tmp3_216*tmp3_501;
        auto tmp3_503 = __PowCall7 + __PowCall12 + __PowCall11;
        auto tmp3_504 = tmp3_503 + 1;
        auto tmp3_505 = msq*tmp3_504*tmp3_489;
        auto tmp3_506 = tmp3_505 + tmp3_494 + tmp3_502 + tmp3_498;
        auto tmp3_507 = tmp3_182*tmp3_506;
        auto tmp3_508 = tmp3_194*tmp1_3;
        auto tmp3_509 = tmp3_508 + tmp3_61;
        auto tmp3_510 = tmp3_509*tmp3_205;
        auto tmp3_511 = tmp3_484*__PowCall8;
        auto tmp3_512 = tmp3_510 + tmp3_511 + tmp3_508;
        auto tmp3_513 = tmp3_216*tmp3_512;
        auto tmp3_514 = __PowCall8*tmp3_487;
        auto tmp3_515 = tmp3_514 + tmp3_512;
        auto tmp3_516 = tmp3_228*tmp3_515;
        auto tmp3_517 = tmp3_228 + tmp3_216 + tmp3_170;
        auto tmp3_518 = __PowCall9 + __PowCall10 + 1;
        auto tmp3_519 = tmp3_518 + __PowCall8;
        auto tmp3_520 = tmp3_519*tmp3_517;
        auto tmp3_521 = __PowCall8*tmp3_503;
        auto tmp3_522 = tmp3_521 + tmp3_518 + tmp3_520;
        auto tmp3_523 = msq*tmp3_522;
        auto tmp3_524 = tmp3_484 + tmp1_3;
        auto tmp3_525 = tmp3_524*tmp3_194;
        auto tmp3_526 = 1 + tmp3_170;
        auto tmp3_527 = tmp3_61*tmp3_526;
        auto tmp3_528 = tmp3_525 + tmp3_527;
        auto tmp3_529 = tmp3_205*tmp3_528;
        auto tmp3_530 = tmp3_507 + tmp3_523 + tmp3_516 + tmp3_513 + tmp3_525 + tmp3_529;
        auto __PowCall13 = SecDecInternalSqr(tmp3_530)*tmp3_530;
        auto __DenominatorCall1 = SecDecInternalDenominator(__PowCall13);
        auto tmp3_531 = -tmp3_110 + tmp3_530;
        auto tmp3_532 = tmp3_482*tmp3_165*__DenominatorCall1*tmp1_34*tmp3_239;
        auto _SignCheckExpression = SecDecInternalImagPart(tmp3_531);
        SecDecInternalSignCheckContourDeformation(!(_SignCheckExpression<=0), 1);
        auto tmp3_533 = SecDecInternalRealPart(tmp3_239);
        SecDecInternalSignCheckPositivePolynomial(!(tmp3_533>=0), 1);
        acc = acc + w*(tmp3_532);
    }
    *presult = componentsum(acc);
    return 0;
}

#define SecDecInternalOutputDeformationParameters(i, v) deformp[i] = vec_min(deformp[i], v);

extern "C" void
doublebox_nonplanar_integral__sector_5_order_0__maxdeformp(
    real_t * restrict maxdeformp,
    const uint64_t lattice,
    const uint64_t index1,
    const uint64_t index2,
    const uint64_t * restrict genvec,
    const real_t * restrict shift,
    const real_t * restrict realp,
    const complex_t * restrict complexp
)
{
    const real_t s = realp[0]; (void)s;
    const real_t t = realp[1]; (void)t;
    const real_t msq = realp[2]; (void)msq;
    const real_t invlattice = SecDecInternalDenominator((real_t)(double)lattice);
    realvec_t deformp[6] = { REALVEC_CONST(10.0), REALVEC_CONST(10.0), REALVEC_CONST(10.0), REALVEC_CONST(10.0), REALVEC_CONST(10.0), REALVEC_CONST(10.0) };
    uint64_t index = index1;
    int_t li_x0 = mulmod(genvec[0], index, lattice);
    int_t li_x1 = mulmod(genvec[1], index, lattice);
    int_t li_x2 = mulmod(genvec[2], index, lattice);
    int_t li_x3 = mulmod(genvec[3], index, lattice);
    int_t li_x4 = mulmod(genvec[4], index, lattice);
    int_t li_x5 = mulmod(genvec[5], index, lattice);
    for (; index < index2; index += 4) {
        int_t li_x0_0 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        int_t li_x0_1 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        int_t li_x0_2 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        int_t li_x0_3 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        realvec_t x0 = {{ li_x0_0*invlattice, li_x0_1*invlattice, li_x0_2*invlattice, li_x0_3*invlattice }};
        x0 = warponce(x0 + shift[0], 1);
        int_t li_x1_0 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        int_t li_x1_1 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        int_t li_x1_2 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        int_t li_x1_3 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        realvec_t x1 = {{ li_x1_0*invlattice, li_x1_1*invlattice, li_x1_2*invlattice, li_x1_3*invlattice }};
        x1 = warponce(x1 + shift[1], 1);
        int_t li_x2_0 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        int_t li_x2_1 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        int_t li_x2_2 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        int_t li_x2_3 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        realvec_t x2 = {{ li_x2_0*invlattice, li_x2_1*invlattice, li_x2_2*invlattice, li_x2_3*invlattice }};
        x2 = warponce(x2 + shift[2], 1);
        int_t li_x3_0 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        int_t li_x3_1 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        int_t li_x3_2 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        int_t li_x3_3 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        realvec_t x3 = {{ li_x3_0*invlattice, li_x3_1*invlattice, li_x3_2*invlattice, li_x3_3*invlattice }};
        x3 = warponce(x3 + shift[3], 1);
        int_t li_x4_0 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        int_t li_x4_1 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        int_t li_x4_2 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        int_t li_x4_3 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        realvec_t x4 = {{ li_x4_0*invlattice, li_x4_1*invlattice, li_x4_2*invlattice, li_x4_3*invlattice }};
        x4 = warponce(x4 + shift[4], 1);
        int_t li_x5_0 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        int_t li_x5_1 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        int_t li_x5_2 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        int_t li_x5_3 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        realvec_t x5 = {{ li_x5_0*invlattice, li_x5_1*invlattice, li_x5_2*invlattice, li_x5_3*invlattice }};
        x5 = warponce(x5 + shift[5], 1);
        x0 = korobov3x3_f(x0);
        x1 = korobov3x3_f(x1);
        x2 = korobov3x3_f(x2);
        x3 = korobov3x3_f(x3);
        x4 = korobov3x3_f(x4);
        x5 = korobov3x3_f(x5);
        auto tmp1_1 = x2 + 1;
        auto tmp1_2 = tmp1_1*x0;
        auto tmp1_3 = tmp1_2-tmp1_1;
        auto tmp1_4 = tmp1_3*x0;
        auto tmp1_5 = x0-1;
        auto tmp1_6 = x3*x0;
        auto tmp1_7 = tmp1_5*tmp1_6;
        auto tmp3_1 = tmp1_4 + tmp1_7;
        auto tmp1_8 = 2*x5;
        auto tmp1_9 = 2*x4;
        auto tmp1_10 = -tmp1_8-tmp1_9;
        auto tmp3_2 = tmp3_1*tmp1_10;
        auto tmp3_3 = x5 + x4;
        auto tmp1_11 = 2*x0;
        auto tmp1_12 = -tmp3_3*tmp1_5*tmp1_11;
        auto tmp1_13 = tmp1_11-1;
        auto tmp1_14 = -x0*tmp1_13;
        auto tmp3_4 = 1 + tmp1_14;
        auto tmp3_5 = x0*tmp3_4;
        auto tmp3_6 = tmp3_5 + tmp1_12;
        auto tmp3_7 = x1*tmp3_6;
        auto tmp3_8 = tmp1_11*tmp1_1;
        auto tmp1_15 = -tmp3_8-tmp1_1;
        auto tmp3_9 = x0*tmp1_15;
        auto tmp1_16 = 3*tmp1_1;
        auto tmp3_10 = tmp1_16 + tmp3_9;
        auto tmp3_11 = x0*tmp3_10;
        auto tmp1_17 = tmp1_11 + 1;
        auto tmp1_18 = -x0*tmp1_17;
        auto tmp3_12 = 3 + tmp1_18;
        auto tmp3_13 = tmp3_12*tmp1_6;
        auto tmp3_14 = tmp3_7 + tmp3_11 + tmp3_13 + tmp3_2;
        auto tmp3_15 = x1*tmp3_14;
        auto tmp3_16 = -tmp1_3*tmp1_11;
        auto tmp3_17 = tmp3_16-tmp1_7;
        auto tmp3_18 = x3*tmp3_17;
        auto tmp3_19 = x2 + 2;
        auto tmp3_20 = tmp3_19*x2;
        auto tmp3_21 = tmp3_20 + 1;
        auto tmp3_22 = -x0*tmp3_21*tmp1_5;
        auto tmp3_23 = tmp3_15 + tmp3_22 + tmp3_18;
        auto tmp3_24 = msq*tmp3_23;
        auto tmp3_25 = x0*t;
        auto tmp3_26 = -t + tmp3_25;
        auto tmp3_27 = tmp3_26*tmp1_6;
        auto tmp3_28 = x0*x2;
        auto tmp3_29 = tmp3_28*s;
        auto tmp3_30 = -x2*s;
        auto tmp3_31 = tmp3_30 + tmp3_29;
        auto tmp3_32 = x1*x0*tmp3_31;
        auto tmp3_33 = tmp3_24 + tmp3_27 + tmp3_32;
        auto tmp3_34 = x2-1;
        auto tmp3_35 = tmp3_34*tmp1_11;
        auto tmp3_36 = 1 + 3*x2;
        auto tmp3_37 = tmp1_11 + 3;
        auto tmp1_19 = tmp3_37*x3;
        auto tmp3_38 = tmp3_35 + tmp3_36 + tmp1_19;
        auto tmp1_20 = tmp3_34 + x3;
        auto tmp1_21 = -x4*tmp1_20;
        auto tmp3_39 = tmp1_21-tmp3_38;
        auto tmp3_40 = x4*tmp3_39;
        auto tmp1_22 = tmp1_9 + x5;
        auto tmp3_41 = -tmp1_20*tmp1_22;
        auto tmp3_42 = tmp3_41-tmp3_38;
        auto tmp3_43 = x5*tmp3_42;
        auto tmp3_44 = -tmp1_17-tmp1_22;
        auto tmp3_45 = x5*tmp3_44;
        auto tmp1_23 = x0 + 1;
        auto tmp1_24 = -x0*tmp1_23;
        auto tmp1_25 = -x4-tmp1_17;
        auto tmp3_46 = x4*tmp1_25;
        auto tmp3_47 = tmp3_45 + tmp1_24 + tmp3_46;
        auto tmp3_48 = x1*tmp3_47;
        auto tmp3_49 = x0 + 3;
        auto tmp3_50 = tmp3_49*x0;
        auto tmp3_51 = tmp3_50 + 1;
        auto tmp3_52 = tmp3_51*x3;
        auto tmp3_53 = tmp3_52 + tmp1_1;
        auto tmp1_26 = -x0*tmp3_34;
        auto tmp3_54 = tmp1_26-tmp3_36;
        auto tmp3_55 = x0*tmp3_54;
        auto tmp3_56 = 2*tmp3_48 + tmp3_43 + tmp3_40 + tmp3_55-tmp3_53;
        auto tmp3_57 = x1*tmp3_56;
        auto tmp3_58 = tmp1_19 + tmp1_16;
        auto tmp3_59 = tmp3_58 + tmp3_8;
        auto tmp3_60 = tmp1_1 + x3;
        auto tmp3_61 = x4*tmp3_60;
        auto tmp3_62 = tmp3_61 + tmp3_59;
        auto tmp3_63 = x4*tmp3_62;
        auto tmp1_27 = tmp3_60*tmp1_9;
        auto tmp3_64 = tmp1_27 + tmp3_8;
        auto tmp3_65 = tmp3_58 + tmp3_64;
        auto tmp3_66 = x5*tmp3_60;
        auto tmp3_67 = tmp3_66 + tmp3_65;
        auto tmp3_68 = x5*tmp3_67;
        auto tmp3_69 = tmp1_16 + tmp1_2;
        auto tmp3_70 = x0*tmp3_69;
        auto tmp3_71 = tmp3_57 + tmp3_68 + tmp3_63 + tmp3_70 + tmp3_53;
        auto tmp3_72 = msq*tmp3_71;
        auto tmp3_73 = x4*t;
        auto tmp3_74 = tmp3_29 + tmp3_73;
        auto tmp3_75 = x2*t;
        auto tmp3_76 = x3*t;
        auto tmp3_77 = tmp3_75 + tmp3_76;
        auto tmp1_28 = -t + tmp3_77;
        auto tmp3_78 = x4*tmp1_28;
        auto tmp3_79 = tmp3_76 + tmp3_78;
        auto tmp3_80 = x5*tmp3_79;
        auto tmp1_29 = x1*x5;
        auto tmp1_30 = t*tmp1_9*tmp1_29;
        auto tmp3_81 = tmp1_30 + tmp3_80 + tmp3_74;
        auto tmp3_82 = x1*tmp3_81;
        auto tmp3_83 = tmp3_77 + t;
        auto tmp3_84 = tmp3_83*x4;
        auto tmp1_31 = tmp3_84 + tmp3_76;
        auto tmp1_32 = tmp1_31*x5;
        auto tmp3_85 = tmp3_72 + tmp3_82-tmp1_32-tmp3_74;
        auto tmp3_86 = x1*tmp3_85;
        auto tmp3_87 = tmp3_34*x2;
        auto tmp3_88 = tmp3_87*x3;
        auto tmp3_89 = SecDecInternalSqr(x2);
        auto tmp3_90 = tmp3_89-1;
        auto tmp1_33 = tmp3_90*x2;
        auto tmp3_91 = tmp3_88 + tmp1_33;
        auto tmp3_92 = -tmp3_91*tmp3_3;
        auto tmp3_93 = -tmp3_90*tmp3_28;
        auto tmp3_94 = tmp3_34*tmp3_28;
        auto tmp3_95 = -tmp3_87-tmp3_94;
        auto tmp3_96 = x3*tmp3_95;
        auto tmp3_97 = tmp3_96-tmp1_33 + tmp3_93 + tmp3_92;
        auto tmp3_98 = -tmp3_37-tmp1_22;
        auto tmp3_99 = x5*tmp3_98;
        auto tmp3_100 = -x4-tmp3_37;
        auto tmp3_101 = x4*tmp3_100;
        auto tmp3_102 = tmp3_99 + tmp3_101-1;
        auto tmp3_103 = tmp3_87*tmp3_102;
        auto tmp3_104 = -3*tmp3_87-tmp3_94;
        auto tmp3_105 = x0*tmp3_104;
        auto tmp3_106 = tmp3_105 + tmp3_103;
        auto tmp3_107 = x1*tmp3_106;
        auto tmp3_108 = 2*tmp3_97 + tmp3_107;
        auto tmp3_109 = msq*tmp3_108;
        auto tmp3_110 = s*tmp3_94;
        auto tmp3_111 = x5*x4;
        auto tmp3_112 = -t + tmp3_75;
        auto tmp3_113 = x2*tmp3_112*tmp3_111;
        auto tmp3_114 = tmp3_110 + tmp3_113;
        auto tmp3_115 = x1*tmp3_114;
        auto tmp3_116 = tmp3_115 + tmp3_109;
        auto tmp3_117 = -x3*tmp1_23;
        auto tmp3_118 = tmp3_117-x2-tmp3_28;
        auto tmp3_119 = x3*tmp3_118;
        auto tmp3_120 = x3 + x2;
        auto tmp3_121 = tmp3_120*x3;
        auto tmp3_122 = tmp3_121-tmp1_1;
        auto tmp3_123 = -x5*tmp3_122;
        auto tmp3_124 = tmp3_123 + tmp3_119 + tmp1_2 + tmp1_1;
        auto tmp3_125 = x3*tmp3_124;
        auto tmp3_126 = x4*x3;
        auto tmp3_127 = -tmp3_122*tmp3_126;
        auto tmp3_128 = tmp3_127 + tmp3_125;
        auto tmp3_129 = tmp3_37-tmp1_19;
        auto tmp3_130 = x3*tmp3_129;
        auto tmp3_131 = x3-1;
        auto tmp3_132 = -tmp3_131*tmp3_126;
        auto tmp3_133 = tmp3_130 + tmp3_132;
        auto tmp3_134 = x4*tmp3_133;
        auto tmp3_135 = -tmp3_131*tmp1_22;
        auto tmp3_136 = tmp3_129 + tmp3_135;
        auto tmp3_137 = x5*x3*tmp3_136;
        auto tmp3_138 = tmp3_131*x3;
        auto tmp3_139 = -tmp3_51*tmp3_138;
        auto tmp3_140 = tmp3_137 + tmp3_139 + tmp3_134;
        auto tmp3_141 = x1*tmp3_140;
        auto tmp3_142 = 2*tmp3_128 + tmp3_141;
        auto tmp3_143 = msq*tmp3_142;
        auto tmp3_144 = tmp3_25 + t;
        auto tmp3_145 = tmp3_144*tmp3_138;
        auto tmp3_146 = tmp3_76-t;
        auto tmp3_147 = tmp3_146*x3;
        auto tmp3_148 = tmp3_147*x4;
        auto tmp3_149 = tmp3_147 + tmp3_148;
        auto tmp3_150 = tmp3_149*tmp1_29;
        auto tmp3_151 = x5*tmp3_147;
        auto tmp3_152 = tmp3_143 + tmp3_150 + tmp3_151 + tmp3_145 + tmp3_148;
        auto tmp3_153 = tmp1_17*x3;
        auto tmp3_154 = tmp1_1 + tmp3_153 + tmp3_64;
        auto tmp3_155 = -x4*tmp3_154;
        auto tmp3_156 = tmp3_155 + tmp3_59;
        auto tmp3_157 = x4*tmp3_156;
        auto tmp3_158 = x4-1;
        auto tmp3_159 = tmp3_158*tmp1_9*x5;
        auto tmp3_160 = tmp1_13 + tmp1_9;
        auto tmp3_161 = -x4*tmp3_160;
        auto tmp3_162 = tmp3_161 + tmp1_17;
        auto tmp3_163 = x4*tmp3_162;
        auto tmp3_164 = tmp3_163-tmp3_159;
        auto tmp3_165 = x1*tmp3_164;
        auto tmp3_166 = -tmp3_60*tmp3_159;
        auto tmp3_167 = tmp3_165 + tmp3_157 + tmp3_166;
        auto tmp3_168 = x1*tmp3_167;
        auto tmp3_169 = x3 + 2*tmp1_1;
        auto tmp3_170 = tmp3_169*x3;
        auto tmp3_171 = tmp3_170 + tmp3_21;
        auto tmp3_172 = tmp3_158*x4;
        auto tmp3_173 = -tmp3_171*tmp3_172;
        auto tmp3_174 = tmp3_173 + tmp3_168;
        auto tmp3_175 = msq*tmp3_174;
        auto tmp3_176 = tmp3_73-t;
        auto tmp3_177 = x1*tmp3_176;
        auto tmp3_178 = tmp3_177 + tmp3_84-tmp3_83;
        auto tmp3_179 = tmp3_111*tmp3_178;
        auto tmp3_180 = x4*tmp3_176;
        auto tmp3_181 = tmp3_180 + tmp3_179;
        auto tmp3_182 = x1*tmp3_181;
        auto tmp3_183 = tmp3_76*tmp3_172;
        auto tmp3_184 = tmp3_175 + tmp3_183 + tmp3_182;
        auto tmp3_185 = -tmp3_60*tmp1_8;
        auto tmp3_186 = tmp3_185-tmp3_154;
        auto tmp3_187 = x5*tmp3_186;
        auto tmp3_188 = tmp3_187 + tmp3_65;
        auto tmp3_189 = x5*tmp3_188;
        auto tmp3_190 = -tmp1_8-tmp3_160;
        auto tmp3_191 = x5*tmp3_190;
        auto tmp3_192 = tmp3_191 + tmp1_9 + tmp1_17;
        auto tmp3_193 = tmp3_192*tmp1_29;
        auto tmp3_194 = tmp3_189 + tmp3_193;
        auto tmp3_195 = x1*tmp3_194;
        auto tmp3_196 = x5-1;
        auto tmp3_197 = tmp3_196*x5;
        auto tmp3_198 = -tmp3_171*tmp3_197;
        auto tmp3_199 = tmp3_198 + tmp3_195;
        auto tmp3_200 = msq*tmp3_199;
        auto tmp3_201 = tmp1_29*tmp3_73*tmp3_196;
        auto tmp3_202 = tmp1_31*tmp3_197;
        auto tmp3_203 = tmp3_202 + tmp3_201;
        auto tmp3_204 = x1*tmp3_203;
        auto tmp3_205 = tmp3_76*tmp3_197;
        auto tmp3_206 = tmp3_200 + tmp3_205 + tmp3_204;
        SecDecInternalOutputDeformationParameters(0, SecDecInternalDenominator(SecDecInternalAbs(SecDecInternalRealPart(tmp3_33))));
        SecDecInternalOutputDeformationParameters(1, SecDecInternalDenominator(SecDecInternalAbs(SecDecInternalRealPart(tmp3_86))));
        SecDecInternalOutputDeformationParameters(2, SecDecInternalDenominator(SecDecInternalAbs(SecDecInternalRealPart(tmp3_116))));
        SecDecInternalOutputDeformationParameters(3, SecDecInternalDenominator(SecDecInternalAbs(SecDecInternalRealPart(tmp3_152))));
        SecDecInternalOutputDeformationParameters(4, SecDecInternalDenominator(SecDecInternalAbs(SecDecInternalRealPart(tmp3_184))));
        SecDecInternalOutputDeformationParameters(5, SecDecInternalDenominator(SecDecInternalAbs(SecDecInternalRealPart(tmp3_206))));
    }
    maxdeformp[0] = componentmin(deformp[0]);
    maxdeformp[1] = componentmin(deformp[1]);
    maxdeformp[2] = componentmin(deformp[2]);
    maxdeformp[3] = componentmin(deformp[3]);
    maxdeformp[4] = componentmin(deformp[4]);
    maxdeformp[5] = componentmin(deformp[5]);
}

extern "C" int
doublebox_nonplanar_integral__sector_5_order_0__fpolycheck(
    const uint64_t lattice,
    const uint64_t index1,
    const uint64_t index2,
    const uint64_t * restrict genvec,
    const real_t * restrict shift,
    const real_t * restrict realp,
    const complex_t * restrict complexp,
    const real_t * restrict deformp
)
{
    const real_t s = realp[0]; (void)s;
    const real_t t = realp[1]; (void)t;
    const real_t msq = realp[2]; (void)msq;
    const real_t SecDecInternalLambda0 = deformp[0]; (void)SecDecInternalLambda0;
    const real_t SecDecInternalLambda1 = deformp[1]; (void)SecDecInternalLambda1;
    const real_t SecDecInternalLambda2 = deformp[2]; (void)SecDecInternalLambda2;
    const real_t SecDecInternalLambda3 = deformp[3]; (void)SecDecInternalLambda3;
    const real_t SecDecInternalLambda4 = deformp[4]; (void)SecDecInternalLambda4;
    const real_t SecDecInternalLambda5 = deformp[5]; (void)SecDecInternalLambda5;
    const real_t invlattice = SecDecInternalDenominator((real_t)(double)lattice);
    uint64_t index = index1;
    int_t li_x0 = mulmod(genvec[0], index, lattice);
    int_t li_x1 = mulmod(genvec[1], index, lattice);
    int_t li_x2 = mulmod(genvec[2], index, lattice);
    int_t li_x3 = mulmod(genvec[3], index, lattice);
    int_t li_x4 = mulmod(genvec[4], index, lattice);
    int_t li_x5 = mulmod(genvec[5], index, lattice);
    for (; index < index2; index += 4) {
        int_t li_x0_0 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        int_t li_x0_1 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        int_t li_x0_2 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        int_t li_x0_3 = li_x0; li_x0 = warponce_i(li_x0 + genvec[0], lattice);
        realvec_t x0 = {{ li_x0_0*invlattice, li_x0_1*invlattice, li_x0_2*invlattice, li_x0_3*invlattice }};
        x0 = warponce(x0 + shift[0], 1);
        int_t li_x1_0 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        int_t li_x1_1 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        int_t li_x1_2 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        int_t li_x1_3 = li_x1; li_x1 = warponce_i(li_x1 + genvec[1], lattice);
        realvec_t x1 = {{ li_x1_0*invlattice, li_x1_1*invlattice, li_x1_2*invlattice, li_x1_3*invlattice }};
        x1 = warponce(x1 + shift[1], 1);
        int_t li_x2_0 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        int_t li_x2_1 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        int_t li_x2_2 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        int_t li_x2_3 = li_x2; li_x2 = warponce_i(li_x2 + genvec[2], lattice);
        realvec_t x2 = {{ li_x2_0*invlattice, li_x2_1*invlattice, li_x2_2*invlattice, li_x2_3*invlattice }};
        x2 = warponce(x2 + shift[2], 1);
        int_t li_x3_0 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        int_t li_x3_1 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        int_t li_x3_2 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        int_t li_x3_3 = li_x3; li_x3 = warponce_i(li_x3 + genvec[3], lattice);
        realvec_t x3 = {{ li_x3_0*invlattice, li_x3_1*invlattice, li_x3_2*invlattice, li_x3_3*invlattice }};
        x3 = warponce(x3 + shift[3], 1);
        int_t li_x4_0 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        int_t li_x4_1 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        int_t li_x4_2 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        int_t li_x4_3 = li_x4; li_x4 = warponce_i(li_x4 + genvec[4], lattice);
        realvec_t x4 = {{ li_x4_0*invlattice, li_x4_1*invlattice, li_x4_2*invlattice, li_x4_3*invlattice }};
        x4 = warponce(x4 + shift[4], 1);
        int_t li_x5_0 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        int_t li_x5_1 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        int_t li_x5_2 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        int_t li_x5_3 = li_x5; li_x5 = warponce_i(li_x5 + genvec[5], lattice);
        realvec_t x5 = {{ li_x5_0*invlattice, li_x5_1*invlattice, li_x5_2*invlattice, li_x5_3*invlattice }};
        x5 = warponce(x5 + shift[5], 1);
        x0 = korobov3x3_f(x0);
        x1 = korobov3x3_f(x1);
        x2 = korobov3x3_f(x2);
        x3 = korobov3x3_f(x3);
        x4 = korobov3x3_f(x4);
        x5 = korobov3x3_f(x5);
        auto tmp1_1 = x2 + 1;
        auto tmp1_2 = x0 + 1;
        auto tmp1_3 = tmp1_2*x3;
        auto tmp1_4 = tmp1_1 + x3;
        auto tmp1_5 = tmp1_4*x4;
        auto tmp1_6 = tmp1_4*x5;
        auto tmp1_7 = tmp1_1*x0;
        auto tmp3_1 = tmp1_6 + tmp1_3 + tmp1_5 + tmp1_7 + tmp1_1;
        auto tmp1_8 = 2*x0;
        auto tmp1_9 = tmp1_8 + 3;
        auto tmp1_10 = 2*x4;
        auto tmp1_11 = x5 + tmp1_9 + tmp1_10;
        auto tmp3_2 = tmp1_11*x5;
        auto tmp1_12 = tmp1_9 + x4;
        auto tmp3_3 = tmp1_12*x4;
        auto tmp1_13 = x0 + 3;
        auto tmp3_4 = tmp1_13*x0;
        auto tmp3_5 = tmp3_4 + 1;
        auto tmp3_6 = tmp3_5 + tmp3_2 + tmp3_3;
        auto tmp3_7 = tmp3_6*x1;
        auto tmp3_8 = tmp3_7 + 2*tmp3_1;
        auto tmp3_9 = tmp3_8*msq;
        auto tmp3_10 = x0*s;
        auto tmp3_11 = x4*t;
        auto tmp1_14 = -x5*tmp3_11;
        auto tmp3_12 = -tmp3_10 + tmp1_14;
        auto tmp3_13 = x1*tmp3_12;
        auto tmp3_14 = tmp3_13 + tmp3_9;
        auto tmp1_15 = x1*x5;
        auto tmp1_16 = -t-tmp3_11;
        auto tmp3_15 = tmp1_16*tmp1_15;
        auto tmp1_17 = -x5-tmp1_2;
        auto tmp3_16 = t*tmp1_17;
        auto tmp3_17 = tmp3_9 + tmp3_15-tmp3_11 + tmp3_16;
        auto tmp3_18 = tmp1_8*tmp1_1;
        auto tmp3_19 = tmp1_9*x3;
        auto tmp3_20 = 3*tmp1_1;
        auto tmp3_21 = tmp3_19 + tmp3_18 + tmp3_20;
        auto tmp3_22 = tmp1_4*tmp1_10;
        auto tmp3_23 = tmp3_21 + tmp3_22;
        auto tmp3_24 = tmp1_8 + 1;
        auto tmp1_18 = tmp1_10 + tmp3_24;
        auto tmp1_19 = 2*x5;
        auto tmp1_20 = tmp1_18 + tmp1_19;
        auto tmp3_25 = tmp1_20*x1;
        auto tmp3_26 = tmp1_4*tmp1_19;
        auto tmp3_27 = tmp3_25 + tmp3_26 + tmp3_23;
        auto tmp3_28 = tmp3_27*x1;
        auto tmp3_29 = x2 + 2;
        auto tmp3_30 = tmp3_29*x2;
        auto tmp3_31 = x3 + 2*tmp1_1;
        auto tmp3_32 = tmp3_31*x3;
        auto tmp3_33 = tmp3_28 + tmp3_32 + tmp3_30 + 1;
        auto tmp3_34 = tmp3_33*msq;
        auto tmp3_35 = x3*t;
        auto tmp3_36 = tmp3_34-tmp3_35;
        auto tmp3_37 = -x1*x2*s;
        auto tmp3_38 = tmp3_37 + tmp3_36;
        auto tmp1_21 = t*tmp1_1;
        auto tmp3_39 = tmp3_35 + tmp1_21;
        auto tmp1_22 = tmp3_39*x4;
        auto tmp3_40 = tmp1_22 + tmp3_35;
        auto tmp3_41 = -x1*tmp3_11;
        auto tmp3_42 = tmp3_41-tmp3_40;
        auto tmp3_43 = x1*tmp3_42;
        auto tmp3_44 = tmp3_43 + tmp3_36;
        auto tmp3_45 = -x5*tmp3_39;
        auto tmp3_46 = tmp1_15*t;
        auto tmp3_47 = -tmp3_46-t + tmp3_45;
        auto tmp3_48 = x1*tmp3_47;
        auto tmp3_49 = tmp3_48 + tmp3_36;
        auto tmp3_50 = tmp1_5 + tmp3_21;
        auto tmp3_51 = x4*tmp3_50;
        auto tmp3_52 = tmp1_6 + tmp3_23;
        auto tmp3_53 = x5*tmp3_52;
        auto tmp3_54 = x5 + tmp1_18;
        auto tmp3_55 = x5*tmp3_54;
        auto tmp3_56 = x0*tmp1_2;
        auto tmp3_57 = x4 + tmp3_24;
        auto tmp3_58 = x4*tmp3_57;
        auto tmp3_59 = tmp3_55 + tmp3_56 + tmp3_58;
        auto tmp3_60 = x1*tmp3_59;
        auto tmp3_61 = tmp3_20 + tmp1_7;
        auto tmp3_62 = x0*tmp3_61;
        auto tmp3_63 = x3*tmp3_5;
        auto tmp3_64 = 2*tmp3_60 + tmp3_53 + tmp3_51 + tmp3_63 + tmp3_62 + tmp1_1;
        auto tmp3_65 = msq*tmp3_64;
        auto tmp3_66 = -x5*tmp3_40;
        auto tmp3_67 = -tmp1_10*tmp3_46;
        auto tmp3_68 = -x2*tmp3_10;
        auto tmp3_69 = tmp3_65 + tmp3_67 + tmp3_66 + tmp3_68-tmp3_11;
        auto tmp3_70 = 2*msq;
        auto tmp3_71 = tmp3_70-t;
        auto tmp3_72 = 3*msq;
        auto tmp3_73 = tmp3_72-t;
        auto tmp3_74 = -s + tmp3_72;
        auto tmp3_75 = -1 + x2;
        auto tmp3_76 = x2*SecDecInternalLambda2*tmp3_75;
        auto tmp3_77 = -1 + x3;
        auto tmp3_78 = x3*SecDecInternalLambda3*tmp3_77;
        auto tmp3_79 = -1 + x0;
        auto tmp3_80 = x0*SecDecInternalLambda0*tmp3_79;
        auto tmp3_81 = -1 + x5;
        auto tmp3_82 = x5*SecDecInternalLambda5*tmp3_81;
        auto tmp3_83 = -1 + x4;
        auto tmp3_84 = x4*SecDecInternalLambda4*tmp3_83;
        auto tmp3_85 = -1 + x1;
        auto tmp3_86 = x1*SecDecInternalLambda1*tmp3_85;
        auto __RealPartCall1 = SecDecInternalRealPart(tmp3_69);
        auto __RealPartCall2 = SecDecInternalRealPart(tmp3_49);
        auto __RealPartCall3 = SecDecInternalRealPart(tmp3_44);
        auto __RealPartCall4 = SecDecInternalRealPart(tmp3_38);
        auto __RealPartCall5 = SecDecInternalRealPart(tmp3_17);
        auto __RealPartCall6 = SecDecInternalRealPart(tmp3_14);
        auto __Deformedx0Call = x0 + i_*__RealPartCall4*tmp3_80;
        auto __Deformedx1Call = x1 + i_*__RealPartCall1*tmp3_86;
        auto __Deformedx2Call = x2 + i_*__RealPartCall6*tmp3_76;
        auto __Deformedx3Call = x3 + i_*__RealPartCall5*tmp3_78;
        auto __Deformedx4Call = x4 + i_*__RealPartCall2*tmp3_84;
        auto __Deformedx5Call = x5 + i_*__RealPartCall3*tmp3_82;
        auto fpoly_im = SecDecInternalImagPart(__Deformedx3Call*tmp3_71 + __Deformedx3Call*__Deformedx5Call*tmp3_71 + __Deformedx3Call*__Deformedx4Call*tmp3_71 + __Deformedx2Call*tmp3_70 + __Deformedx2Call*__Deformedx5Call*tmp3_70 + __Deformedx2Call*__Deformedx4Call*tmp3_70 + __Deformedx2Call*__Deformedx3Call*tmp3_70 + __Deformedx2Call*__Deformedx3Call*__Deformedx5Call*tmp3_70 + __Deformedx2Call*__Deformedx3Call*__Deformedx4Call*tmp3_70 + __Deformedx1Call*__Deformedx5Call*tmp3_72 + __Deformedx1Call*__Deformedx4Call*tmp3_73 + __Deformedx1Call*__Deformedx4Call*__Deformedx5Call*tmp3_71 + __Deformedx1Call*__Deformedx3Call*__Deformedx5Call*tmp3_73 + __Deformedx1Call*__Deformedx3Call*__Deformedx4Call*tmp3_72 + __Deformedx1Call*__Deformedx3Call*__Deformedx4Call*__Deformedx5Call*tmp3_71 + __Deformedx1Call*__Deformedx2Call*__Deformedx5Call*tmp3_72 + __Deformedx1Call*__Deformedx2Call*__Deformedx4Call*tmp3_72 + __Deformedx1Call*__Deformedx2Call*__Deformedx4Call*__Deformedx5Call*tmp3_71 + SecDecInternalSqr(__Deformedx1Call)*__Deformedx4Call*__Deformedx5Call*tmp3_71 + __Deformedx0Call*__Deformedx3Call*tmp3_71 + __Deformedx0Call*__Deformedx2Call*tmp3_70 + __Deformedx0Call*__Deformedx2Call*__Deformedx3Call*tmp3_70 + __Deformedx0Call*__Deformedx1Call*tmp3_72 + __Deformedx0Call*__Deformedx1Call*__Deformedx5Call*tmp3_70 + __Deformedx0Call*__Deformedx1Call*__Deformedx4Call*tmp3_70 + __Deformedx0Call*__Deformedx1Call*__Deformedx3Call*tmp3_72 + __Deformedx0Call*__Deformedx1Call*__Deformedx3Call*__Deformedx5Call*tmp3_70 + __Deformedx0Call*__Deformedx1Call*__Deformedx3Call*__Deformedx4Call*tmp3_70 + __Deformedx0Call*__Deformedx1Call*__Deformedx2Call*tmp3_74 + __Deformedx0Call*__Deformedx1Call*__Deformedx2Call*__Deformedx5Call*tmp3_70 + __Deformedx0Call*__Deformedx1Call*__Deformedx2Call*__Deformedx4Call*tmp3_70 + __Deformedx0Call*SecDecInternalSqr(__Deformedx1Call)*__Deformedx5Call*tmp3_70 + __Deformedx0Call*SecDecInternalSqr(__Deformedx1Call)*__Deformedx4Call*tmp3_70 + msq + msq*__Deformedx5Call + msq*__Deformedx4Call + msq*SecDecInternalSqr(__Deformedx3Call)+msq*SecDecInternalSqr(__Deformedx3Call)*__Deformedx5Call + msq*SecDecInternalSqr(__Deformedx3Call)*__Deformedx4Call + msq*SecDecInternalSqr(__Deformedx2Call)+msq*SecDecInternalSqr(__Deformedx2Call)*__Deformedx5Call + msq*SecDecInternalSqr(__Deformedx2Call)*__Deformedx4Call + msq*__Deformedx1Call + msq*__Deformedx1Call*SecDecInternalSqr(__Deformedx5Call)+msq*__Deformedx1Call*SecDecInternalSqr(__Deformedx4Call)+msq*__Deformedx1Call*__Deformedx3Call + msq*__Deformedx1Call*__Deformedx3Call*SecDecInternalSqr(__Deformedx5Call)+msq*__Deformedx1Call*__Deformedx3Call*SecDecInternalSqr(__Deformedx4Call)+msq*__Deformedx1Call*__Deformedx2Call + msq*__Deformedx1Call*__Deformedx2Call*SecDecInternalSqr(__Deformedx5Call)+msq*__Deformedx1Call*__Deformedx2Call*SecDecInternalSqr(__Deformedx4Call)+msq*SecDecInternalSqr(__Deformedx1Call)*__Deformedx5Call + msq*SecDecInternalSqr(__Deformedx1Call)*SecDecInternalSqr(__Deformedx5Call)+msq*SecDecInternalSqr(__Deformedx1Call)*__Deformedx4Call + msq*SecDecInternalSqr(__Deformedx1Call)*SecDecInternalSqr(__Deformedx4Call)+msq*__Deformedx0Call + msq*__Deformedx0Call*SecDecInternalSqr(__Deformedx3Call)+msq*__Deformedx0Call*SecDecInternalSqr(__Deformedx2Call)+msq*__Deformedx0Call*SecDecInternalSqr(__Deformedx1Call)+msq*SecDecInternalSqr(__Deformedx0Call)*__Deformedx1Call + msq*SecDecInternalSqr(__Deformedx0Call)*__Deformedx1Call*__Deformedx3Call + msq*SecDecInternalSqr(__Deformedx0Call)*__Deformedx1Call*__Deformedx2Call + msq*SecDecInternalSqr(__Deformedx0Call)*SecDecInternalSqr(__Deformedx1Call));
        if (unlikely(!(fpoly_im <= 0))) return 1;
    }
    return 0;
}
